//@version=6
strategy("Comprehensive Trading Strategy with Backtest", shorttitle="CTS-BT", overlay=true, 
   default_qty_type=strategy.percent_of_equity, default_qty_value=10, 
   commission_type=strategy.commission.percent, commission_value=0.1)

// ============================================================================
// INPUT PARAMETERS
// ============================================================================

// Moving Averages - Optimized for Day Trading
ema_fast_length = input.int(8, title="EMA Fast Length", tooltip="Day Trading: 5-10 periods. Lower = More responsive to price changes", group="Moving Averages", minval=3, maxval=21)
ema_slow_length = input.int(21, title="EMA Slow Length", tooltip="Day Trading: 15-25 periods. Standard is 21 for intraday", group="Moving Averages", minval=10, maxval=50)
sma_length = input.int(20, title="SMA Length", tooltip="Day Trading: 20 periods (1 hour on 3min chart). Shorter for faster signals", group="Moving Averages", minval=10, maxval=50)
sma_long_length = input.int(50, title="SMA Long Length", tooltip="Day Trading: 50 periods for trend filter. Don't use 200 for intraday", group="Moving Averages", minval=30, maxval=100)

// RSI - Day Trading Optimized
rsi_length = input.int(9, title="RSI Length", tooltip="Day Trading: 9-14 periods. 9 is more sensitive for intraday", group="RSI", minval=7, maxval=21)
rsi_overbought = input.int(75, title="RSI Overbought", tooltip="Day Trading: 75-80. Higher threshold reduces false signals", group="RSI", minval=70, maxval=85)
rsi_oversold = input.int(25, title="RSI Oversold", tooltip="Day Trading: 20-25. Lower threshold for better entries", group="RSI", minval=15, maxval=30)

// MACD - Day Trading Optimized
macd_fast_length = input.int(8, title="MACD Fast Length", tooltip="Day Trading: 8-12. Faster for intraday momentum", group="MACD", minval=5, maxval=15)
macd_slow_length = input.int(21, title="MACD Slow Length", tooltip="Day Trading: 21-26. Standard for intraday", group="MACD", minval=15, maxval=35)
macd_signal_length = input.int(7, title="MACD Signal Length", tooltip="Day Trading: 7-9. Faster signal line for quicker entries", group="MACD", minval=5, maxval=12)

// Bollinger Bands - Day Trading Optimized
bb_length = input.int(15, title="BB Length", tooltip="Day Trading: 15-20 periods. Shorter for more responsive bands", group="Bollinger Bands", minval=10, maxval=25)
bb_mult = input.float(2.0, title="BB Multiplier", tooltip="Day Trading: 2.0-2.2. Standard deviation for volatility", group="Bollinger Bands", minval=1.5, maxval=2.5)

// Stochastic - Day Trading Optimized
stoch_k_length = input.int(10, title="Stochastic %K Length", tooltip="Day Trading: 10-14. Shorter for faster momentum detection", group="Stochastic", minval=8, maxval=21)
stoch_d_length = input.int(3, title="Stochastic %D Length", tooltip="Standard smoothing period", group="Stochastic", minval=2, maxval=5)
stoch_overbought = input.int(85, title="Stochastic Overbought", tooltip="Day Trading: 85. Higher to reduce false signals", group="Stochastic", minval=75, maxval=90)
stoch_oversold = input.int(15, title="Stochastic Oversold", tooltip="Day Trading: 15. Lower for better entry timing", group="Stochastic", minval=10, maxval=25)

// ADX
adx_length = input.int(14, title="ADX Length", group="ADX")
adx_threshold = input.int(25, title="ADX Threshold", group="ADX")

// Volume
volume_ma_length = input.int(20, title="Volume MA Length", group="Volume")

// Williams %R
williams_length = input.int(14, title="Williams %R Length", group="Williams %R")

// Commodity Channel Index (CCI)
cci_length = input.int(20, title="CCI Length", group="CCI")

// Scoring System - Balanced threshold for practical signals
min_score = input.int(8, title="Minimum Score for Signal", tooltip="Lower = More signals (5-7), Higher = Fewer signals (12-15). Default 8 is balanced.", group="Signal Settings", minval=5, maxval=20)
signal_strength_multiplier = input.float(1.2, title="Signal Strength Multiplier", tooltip="Higher = Stricter signals. 1.0=Relaxed, 1.5=Strict, 2.0=Very Strict", group="Signal Settings", minval=1.0, maxval=2.0)

// Day Trading Specific Settings
use_time_filter = input.bool(true, title="Use Trading Hours Filter", tooltip="Recommended: ON. Avoids low volume periods", group="Day Trading")
start_hour = input.int(9, title="Start Hour", tooltip="Market open hour (9 for NYSE)", group="Day Trading", minval=0, maxval=23)
end_hour = input.int(16, title="End Hour", tooltip="Market close hour (16 for NYSE)", group="Day Trading", minval=0, maxval=23)
avoid_lunch_hour = input.bool(true, title="Avoid Lunch Hour (12-13)", tooltip="Recommended: ON. Low volume period", group="Day Trading")

// Day Trading Risk Management
use_stop_loss = input.bool(true, title="Use Stop Loss", tooltip="CRITICAL for day trading. Protects from intraday reversals.", group="Risk Management")
stop_loss_percent = input.float(2.0, title="Stop Loss %", tooltip="Day Trading: 1-3%. Tighter stops for intraday volatility.", group="Risk Management", minval=0.5, maxval=5.0)
use_take_profit = input.bool(true, title="Use Take Profit", tooltip="Day Trading: Lock profits quickly before reversals.", group="Risk Management")
take_profit_percent = input.float(4.0, title="Take Profit %", tooltip="Day Trading: 2-6%. Quick profits better than big swings.", group="Risk Management", minval=1.0, maxval=10.0)
position_size = input.float(5.0, title="Position Size % of Equity", tooltip="Day Trading: 2-10%. Lower risk per trade for multiple daily trades.", group="Risk Management", minval=1.0, maxval=25.0)

// Day Trading Signal Settings
min_volume_multiplier = input.float(1.5, title="Minimum Volume Multiplier", tooltip="Day Trading: 1.5-2.0. Ensures adequate liquidity", group="Day Trading", minval=1.0, maxval=3.0)

// LuxAlgo-Style Advanced Features
show_market_structure = input.bool(true, title="Show Market Structure (BOS/CHoCH)", tooltip="Break of Structure and Change of Character analysis", group="LuxAlgo Features")
show_order_blocks = input.bool(true, title="Show Order Blocks", tooltip="Institutional order block zones", group="LuxAlgo Features")
show_liquidity_zones = input.bool(true, title="Show Liquidity Zones", tooltip="Areas where liquidity is likely to be grabbed", group="LuxAlgo Features")
show_premium_discount = input.bool(true, title="Show Premium/Discount Zones", tooltip="Fair value gaps and imbalance zones", group="LuxAlgo Features")
smart_money_filter = input.bool(true, title="Smart Money Filter", tooltip="Filter signals based on institutional flow", group="LuxAlgo Features")

// ============================================================================
// INDICATOR CALCULATIONS
// ============================================================================

// Moving Averages
ema_fast = ta.ema(close, ema_fast_length)
ema_slow = ta.ema(close, ema_slow_length)
sma = ta.sma(close, sma_length)
sma_long = ta.sma(close, sma_long_length)

// RSI
rsi = ta.rsi(close, rsi_length)

// MACD
[macd_line, signal_line, histogram] = ta.macd(close, macd_fast_length, macd_slow_length, macd_signal_length)

// Bollinger Bands
[bb_middle, bb_upper, bb_lower] = ta.bb(close, bb_length, bb_mult)

// Stochastic
stoch_k = ta.stoch(close, high, low, stoch_k_length)
stoch_d = ta.sma(stoch_k, stoch_d_length)

// ADX
[di_plus, di_minus, adx] = ta.dmi(adx_length, adx_length)

// Volume
volume_ma = ta.sma(volume, volume_ma_length)

// Williams %R
williams_r = ta.wpr(williams_length)

// CCI
cci = ta.cci(hlc3, cci_length)

// Golden Cross and Death Cross
golden_cross = ta.crossover(ema_fast, sma_long)
death_cross = ta.crossunder(ema_fast, sma_long)

// Fibonacci Levels (simplified)
fib_high = ta.highest(high, 50)
fib_low = ta.lowest(low, 50)
fib_range = fib_high - fib_low
fib_236 = fib_low + fib_range * 0.236
fib_382 = fib_low + fib_range * 0.382
fib_500 = fib_low + fib_range * 0.500
fib_618 = fib_low + fib_range * 0.618
fib_786 = fib_low + fib_range * 0.786

// Parabolic SAR
psar = ta.sar(0.02, 0.02, 0.2)

// Ichimoku Cloud components
tenkan = (ta.highest(high, 9) + ta.lowest(low, 9)) / 2
kijun = (ta.highest(high, 26) + ta.lowest(low, 26)) / 2
senkou_a = (tenkan + kijun) / 2
senkou_b = (ta.highest(high, 52) + ta.lowest(low, 52)) / 2

// On Balance Volume (OBV)
obv = ta.obv

// Money Flow Index (MFI)
mfi = ta.mfi(close, 14)

// Global volume calculations to avoid conditional ta.sma calls
volume_sma_20 = ta.sma(volume, 20)
close_sma_50 = ta.sma(close, 50)

// ============================================================================
// CHART PATTERN DETECTION
// ============================================================================

// Candlestick Patterns
bullish_engulfing = close[1] < open[1] and close > open and close > open[1] and open < close[1]
bearish_engulfing = close[1] > open[1] and close < open and close < open[1] and open > close[1]

doji = math.abs(close - open) <= (high - low) * 0.1
hammer = (close > open) and ((high - close) <= 2 * (close - open)) and ((open - low) >= 2 * (close - open))
shooting_star = (close < open) and ((close - low) <= 2 * (open - close)) and ((high - open) >= 2 * (open - close))

// Support and Resistance Levels
pivot_high = ta.pivothigh(high, 5, 5)
pivot_low = ta.pivotlow(low, 5, 5)

// Double Top/Bottom Detection (simplified)
double_top = not na(pivot_high) and not na(pivot_high[10]) and math.abs(pivot_high - pivot_high[10]) < (high - low) * 0.02
double_bottom = not na(pivot_low) and not na(pivot_low[10]) and math.abs(pivot_low - pivot_low[10]) < (high - low) * 0.02

// Triangle Pattern Detection (simplified)
higher_lows = low > low[5] and low[5] > low[10]
lower_highs = high < high[5] and high[5] < high[10]
triangle_pattern = higher_lows and lower_highs

// Head and Shoulders (simplified detection)
head_shoulders = not na(pivot_high[10]) and not na(pivot_high[5]) and not na(pivot_high) and 
   pivot_high[5] > pivot_high[10] and pivot_high[5] > pivot_high and
   math.abs(pivot_high[10] - pivot_high) < (high - low) * 0.05

// Inverse Head and Shoulders
inv_head_shoulders = not na(pivot_low[10]) and not na(pivot_low[5]) and not na(pivot_low) and 
   pivot_low[5] < pivot_low[10] and pivot_low[5] < pivot_low and
   math.abs(pivot_low[10] - pivot_low) < (high - low) * 0.05

// Flag and Pennant Patterns
flag_pattern_bull = close > close[10] and close[10] > close[20] and 
   (high[1] - low[1]) < (high[10] - low[10]) * 0.5
flag_pattern_bear = close < close[10] and close[10] < close[20] and 
   (high[1] - low[1]) < (high[10] - low[10]) * 0.5

// Wedge Patterns
rising_wedge = low > low[5] and low[5] > low[10] and high > high[5] and high[5] > high[10] and
   (high - low) < (high[10] - low[10])
falling_wedge = low < low[5] and low[5] < low[10] and high < high[5] and high[5] < high[10] and
   (high - low) < (high[10] - low[10])

// Cup and Handle Pattern
cup_pattern = not na(pivot_low[20]) and not na(pivot_low[10]) and not na(pivot_low) and 
   pivot_low[10] < pivot_low[20] and pivot_low[10] < pivot_low and
   math.abs(pivot_low[20] - pivot_low) < (high - low) * 0.1

// ============================================================================
// PROPER ELLIOTT WAVE ANALYSIS - Sequential Wave Structure
// ============================================================================

// Elliott Wave - Day Trading Optimized
wave_lookback = input.int(20, title="Elliott Wave Lookback Period", tooltip="Day Trading: 15-30 periods. Shorter for intraday wave detection", group="Elliott Wave", minval=10, maxval=50)

// Day Trading Time Filters
current_hour = hour(time)
in_trading_hours = use_time_filter ? (current_hour >= start_hour and current_hour < end_hour) : true
not_lunch_time = avoid_lunch_hour ? not (current_hour >= 12 and current_hour < 13) : true
time_filter_ok = in_trading_hours and not_lunch_time

// Volume filter for day trading
volume_ok = volume > volume_sma_20 * min_volume_multiplier

// ============================================================================
// LUXALGO-STYLE MARKET STRUCTURE ANALYSIS
// ============================================================================

// Market Structure - Break of Structure (BOS) and Change of Character (CHoCH)
swing_high = ta.pivothigh(high, 5, 5)
swing_low = ta.pivotlow(low, 5, 5)

// Track market structure
var float last_higher_high = na
var float last_lower_low = na
var bool uptrend = true

// Update market structure
if not na(swing_high)
    if na(last_higher_high) or swing_high > last_higher_high
        last_higher_high := swing_high
        uptrend := true
    else if swing_high < last_higher_high
        uptrend := false  // Failed to make higher high

if not na(swing_low)
    if na(last_lower_low) or swing_low < last_lower_low
        last_lower_low := swing_low
        uptrend := false
    else if swing_low > last_lower_low
        uptrend := true  // Failed to make lower low

// Break of Structure (BOS) Detection
bos_bullish = not na(swing_high) and swing_high > last_higher_high and not uptrend[1]
bos_bearish = not na(swing_low) and swing_low < last_lower_low and uptrend[1]

// Change of Character (CHoCH) Detection  
choch_bullish = not na(swing_low) and swing_low > last_lower_low and not uptrend[1]
choch_bearish = not na(swing_high) and swing_high < last_higher_high and uptrend[1]

// Order Blocks Detection (LuxAlgo Style)
// Bullish Order Block - Last bearish candle before strong bullish move
bullish_ob_condition = close[1] < open[1] and close > close[1] * 1.02 and volume > volume_sma_20 * 1.5
bullish_order_block = bullish_ob_condition and not bullish_ob_condition[1]

// Bearish Order Block - Last bullish candle before strong bearish move  
bearish_ob_condition = close[1] > open[1] and close < close[1] * 0.98 and volume > volume_sma_20 * 1.5
bearish_order_block = bearish_ob_condition and not bearish_ob_condition[1]

// Liquidity Zones (LuxAlgo Style) - Areas with multiple touches
liquidity_high = ta.highest(high, 20)
liquidity_low = ta.lowest(low, 20)

// Count touches at key levels
high_touches = 0
low_touches = 0
for i = 1 to 10
    if math.abs(high[i] - liquidity_high) < (high - low) * 0.001
        high_touches += 1
    if math.abs(low[i] - liquidity_low) < (high - low) * 0.001
        low_touches += 1

liquidity_grab_high = high_touches >= 2 and close > liquidity_high
liquidity_grab_low = low_touches >= 2 and close < liquidity_low

// Premium/Discount Zones (LuxAlgo Style)
range_high = ta.highest(high, 50)
range_low = ta.lowest(low, 50)
range_mid = (range_high + range_low) / 2

premium_zone = close > range_mid + (range_high - range_mid) * 0.5  // Upper 25%
discount_zone = close < range_mid - (range_mid - range_low) * 0.5  // Lower 25%
fair_value_zone = not premium_zone and not discount_zone

// Smart Money Flow Indicator (LuxAlgo Style)
// Combines volume, price action, and market structure
smart_money_bullish = bos_bullish or (bullish_order_block and discount_zone) or 
   (choch_bullish and volume > volume_sma_20 * 2.0)

smart_money_bearish = bos_bearish or (bearish_order_block and premium_zone) or 
   (choch_bearish and volume > volume_sma_20 * 2.0)

// Confluence Zones (LuxAlgo Style) - Multiple factors aligning
confluence_bullish = discount_zone and bullish_order_block and 
   (rsi < rsi_oversold or bullish_divergence) and volume_ok

confluence_bearish = premium_zone and bearish_order_block and 
   (rsi > rsi_overbought or bearish_divergence) and volume_ok

// Find significant pivot points for wave analysis - Day Trading Optimized
pivot_high_strength = 5  // Shorter for intraday waves
pivot_low_strength = 5   // Shorter for intraday waves

// Get recent significant highs and lows
recent_high = ta.pivothigh(high, pivot_high_strength, pivot_high_strength)
recent_low = ta.pivotlow(low, pivot_low_strength, pivot_low_strength)

// Track wave progression using proper Elliott Wave rules
var int wave_state = 0
var float wave_1_start_price = na
var float wave_1_end_price = na
var float wave_2_end_price = na
var float wave_3_end_price = na
var float wave_4_end_price = na
var int wave_start_bar = 0

// Elliott Wave State Machine - Proper Sequential Detection
if not na(recent_low) and wave_state == 0
    // Potential Wave 1 start
    wave_1_start_price := recent_low
    wave_start_bar := bar_index
    wave_state := 1

if wave_state == 1 and not na(recent_high) and recent_high > wave_1_start_price * 1.05
    // Wave 1 completion - significant move up from start
    wave_1_end_price := recent_high
    wave_state := 2

if wave_state == 2 and not na(recent_low) and recent_low < wave_1_end_price and recent_low > wave_1_start_price
    // Wave 2 completion - correction that doesn't exceed Wave 1 start
    wave_2_end_price := recent_low
    wave_state := 3

if wave_state == 3 and not na(recent_high) and recent_high > wave_1_end_price * 1.1
    // Wave 3 completion - strongest move, exceeds Wave 1 high significantly
    wave_3_end_price := recent_high
    wave_state := 4

if wave_state == 4 and not na(recent_low) and recent_low < wave_3_end_price and recent_low > wave_2_end_price
    // Wave 4 completion - correction that doesn't overlap Wave 1
    wave_4_end_price := recent_low
    wave_state := 5

if wave_state == 5 and not na(recent_high) and recent_high > wave_4_end_price
    // Wave 5 in progress or completion
    if rsi > 70 and volume < volume_sma_20 * 0.8
        // Wave 5 showing exhaustion signs - cycle may be complete
        wave_state := 0  // Reset for new cycle
    
// Current wave determination based on state and price action
current_wave = wave_state == 1 and close > wave_1_start_price ? 1 :
               wave_state == 2 and close < wave_1_end_price ? 2 :
               wave_state == 3 and close > wave_2_end_price ? 3 :
               wave_state == 4 and close < wave_3_end_price ? 4 :
               wave_state == 5 and close > wave_4_end_price ? 5 : 0

// Wave activity flags for compatibility
wave_1_active = current_wave == 1
wave_2_active = current_wave == 2
wave_3_active = current_wave == 3
wave_4_active = current_wave == 4
wave_5_active = current_wave == 5

// Elliott Wave Buy/Sell Signals
elliott_buy_wave_1 = current_wave == 1 and not wave_1_active[1]  // Just entered wave 1
elliott_buy_wave_3 = current_wave == 3 and not wave_3_active[1]  // Just entered wave 3  
elliott_buy_wave_5 = current_wave == 5 and not wave_5_active[1]  // Just entered wave 5

elliott_sell_wave_2 = current_wave == 2 and not wave_2_active[1]  // Just entered wave 2 correction
elliott_sell_wave_4 = current_wave == 4 and not wave_4_active[1]  // Just entered wave 4 correction

// Optimal Entry Prices based on proper wave structure
wave_1_entry_price = not na(wave_1_start_price) ? wave_1_start_price * 1.02 : close  // 2% above wave start
wave_3_entry_price = not na(wave_2_end_price) ? wave_2_end_price * 1.01 : close  // Just above wave 2 end
wave_5_entry_price = not na(wave_4_end_price) ? wave_4_end_price * 1.005 : close  // Minimal premium above wave 4 end

// Optimal Exit Prices based on wave structure
wave_2_exit_price = not na(wave_1_end_price) ? wave_1_end_price * 0.618 : close * 0.95  // 61.8% retracement target
wave_4_exit_price = not na(wave_3_end_price) ? wave_3_end_price * 0.382 : close * 0.97  // 38.2% retracement target  
wave_5_exit_price = not na(wave_3_end_price) and not na(wave_1_end_price) ? 
   wave_3_end_price + (wave_3_end_price - wave_1_end_price) * 0.618 : close * 1.05  // Fibonacci extension target

// Legacy variables for compatibility
elliott_bullish = elliott_buy_wave_1 or elliott_buy_wave_3 or elliott_buy_wave_5
elliott_bearish = elliott_sell_wave_2 or elliott_sell_wave_4 or (current_wave == 5 and rsi > 80)

// ============================================================================
// REVERSAL DETECTION SYSTEM
// ============================================================================

// 1. DIVERGENCE DETECTION
// Price making higher highs but indicators making lower highs (bearish divergence)
price_higher_high = high > ta.highest(high, 20)[1]
rsi_lower_high = rsi < ta.highest(rsi, 20)[1] and rsi > 50
macd_lower_high = macd_line < ta.highest(macd_line, 20)[1] and macd_line > 0
bearish_divergence = price_higher_high and (rsi_lower_high or macd_lower_high)

// Price making lower lows but indicators making higher lows (bullish divergence)
price_lower_low = low < ta.lowest(low, 20)[1]
rsi_higher_low = rsi > ta.lowest(rsi, 20)[1] and rsi < 50
macd_higher_low = macd_line > ta.lowest(macd_line, 20)[1] and macd_line < 0
bullish_divergence = price_lower_low and (rsi_higher_low or macd_higher_low)

// 2. ELLIOTT WAVE REVERSAL SIGNALS
// Wave 5 exhaustion - multiple warning signs
wave_5_exhaustion = current_wave == 5 and rsi > 75 and volume < volume_sma_20 * 0.8
wave_5_reversal_imminent = wave_5_exhaustion and bearish_divergence

// Wave 2/4 correction completion - bounce signals
wave_2_bounce_setup = current_wave == 2 and rsi < 35 and close <= fib_382
wave_4_bounce_setup = current_wave == 4 and rsi < 40 and close <= fib_500

// 3. SUPPORT/RESISTANCE REVERSAL ZONES
// Major support levels
major_support_1 = ta.lowest(low, 50)
major_support_2 = ta.lowest(low, 100) 
support_zone = close <= major_support_1 * 1.02 or close <= major_support_2 * 1.02

// Major resistance levels
major_resistance_1 = ta.highest(high, 50)
major_resistance_2 = ta.highest(high, 100)
resistance_zone = close >= major_resistance_1 * 0.98 or close >= major_resistance_2 * 0.98

// 4. VOLUME REVERSAL SIGNALS
volume_spike = volume > volume_sma_20 * 2.0
volume_exhaustion = volume < volume_sma_20 * 0.5

// 5. MULTI-TIMEFRAME REVERSAL CONFIRMATION
// Overbought/Oversold across multiple indicators
extreme_overbought = rsi > 80 and stoch_k > 90 and cci > 150 and williams_r > -10
extreme_oversold = rsi < 20 and stoch_k < 10 and cci < -150 and williams_r < -90

// 6. CANDLESTICK REVERSAL PATTERNS (Enhanced)
// Doji at key levels
doji_reversal = doji and (support_zone or resistance_zone)

// Hammer at support
hammer_reversal = hammer and support_zone and rsi < 40

// Shooting star at resistance  
shooting_star_reversal = shooting_star and resistance_zone and rsi > 60

// 7. COMPREHENSIVE REVERSAL SIGNALS
// BULLISH REVERSAL (Upward turn likely)
bullish_reversal = (bullish_divergence or wave_2_bounce_setup or wave_4_bounce_setup or 
   (extreme_oversold and support_zone) or 
   (hammer_reversal and volume_spike) or
   (doji_reversal and support_zone and rsi < 35))

// BEARISH REVERSAL (Downward turn likely)
bearish_reversal = (bearish_divergence or wave_5_reversal_imminent or 
   (extreme_overbought and resistance_zone) or
   (shooting_star_reversal and volume_spike) or
   (doji_reversal and resistance_zone and rsi > 65))

// REVERSAL STRENGTH (1-5 scale)
reversal_strength_bull = (bullish_divergence ? 1 : 0) + (wave_2_bounce_setup or wave_4_bounce_setup ? 1 : 0) + 
   (extreme_oversold ? 1 : 0) + (support_zone ? 1 : 0) + (volume_spike and hammer ? 1 : 0)

reversal_strength_bear = (bearish_divergence ? 1 : 0) + (wave_5_reversal_imminent ? 2 : 0) + 
   (extreme_overbought ? 1 : 0) + (resistance_zone ? 1 : 0) + (volume_spike and shooting_star ? 1 : 0)

// REVERSAL PRICE TARGETS
bullish_reversal_target = support_zone ? close * 1.05 : close * 1.08  // 5-8% bounce expected
bearish_reversal_target = resistance_zone ? close * 0.95 : close * 0.92  // 5-8% drop expected

// Rectangle Pattern
rectangle_top = math.abs(high - high[5]) < (high - low) * 0.02 and 
   math.abs(high[5] - high[10]) < (high - low) * 0.02
rectangle_bottom = math.abs(low - low[5]) < (high - low) * 0.02 and 
   math.abs(low[5] - low[10]) < (high - low) * 0.02
rectangle_pattern = rectangle_top and rectangle_bottom

// Breakout from Rectangle
rectangle_breakout_bull = rectangle_pattern[1] == true and close > high[1]
rectangle_breakout_bear = rectangle_pattern[1] == true and close < low[1]

// Three White Soldiers / Three Black Crows
three_white_soldiers = close > open and close[1] > open[1] and close[2] > open[2] and
   close > close[1] and close[1] > close[2] and
   open < close[1] and open[1] < close[2]

three_black_crows = close < open and close[1] < open[1] and close[2] < open[2] and
   close < close[1] and close[1] < close[2] and
   open > close[1] and open[1] > close[2]

// Morning Star / Evening Star
morning_star = close[2] < open[2] and math.abs(close[1] - open[1]) < (high[1] - low[1]) * 0.3 and
   close > open and close > (close[2] + open[2]) / 2

evening_star = close[2] > open[2] and math.abs(close[1] - open[1]) < (high[1] - low[1]) * 0.3 and
   close < open and close < (close[2] + open[2]) / 2

// Gap Patterns
gap_up = low > high[1]
gap_down = high < low[1]

// Support and Resistance Bounce
support_bounce = low <= fib_382 and low >= fib_236 and close > open
resistance_rejection = high >= fib_618 and high <= fib_786 and close < open

// ============================================================================
// SIGNAL SCORING SYSTEM
// ============================================================================

// Initialize scores
bullish_score = 0
bearish_score = 0

// Moving Average Signals
if close > ema_fast and ema_fast > ema_slow
    bullish_score += 1
if close < ema_fast and ema_fast < ema_slow
    bearish_score += 1

if close > sma and sma > sma_long
    bullish_score += 1
if close < sma and sma < sma_long
    bearish_score += 1

// RSI Signals
if rsi > 50 and rsi < rsi_overbought
    bullish_score += 1
if rsi < 50 and rsi > rsi_oversold
    bearish_score += 1

if rsi < rsi_oversold
    bullish_score += 1
if rsi > rsi_overbought
    bearish_score += 1

// MACD Signals
if macd_line > signal_line and histogram > histogram[1]
    bullish_score += 1
if macd_line < signal_line and histogram < histogram[1]
    bearish_score += 1

// Bollinger Bands Signals
if close < bb_lower
    bullish_score += 1
if close > bb_upper
    bearish_score += 1

// Stochastic Signals
if stoch_k > stoch_d and stoch_k < stoch_overbought
    bullish_score += 1
if stoch_k < stoch_d and stoch_k > stoch_oversold
    bearish_score += 1

// ADX Signals
if adx > adx_threshold and di_plus > di_minus
    bullish_score += 1
if adx > adx_threshold and di_minus > di_plus
    bearish_score += 1

// Volume Signals
if volume > volume_ma * 1.2
    if close > open
        bullish_score += 1
    else
        bearish_score += 1

// Williams %R Signals
if williams_r > -80
    bullish_score += 1
if williams_r < -20
    bearish_score += 1

// CCI Signals
if cci > 0 and cci < 100
    bullish_score += 1
if cci < 0 and cci > -100
    bearish_score += 1

// Golden Cross and Death Cross Signals
if golden_cross
    bullish_score += 3
if death_cross
    bearish_score += 3

// Parabolic SAR Signals
if close > psar
    bullish_score += 1
if close < psar
    bearish_score += 1

// Ichimoku Signals
if close > senkou_a and close > senkou_b and tenkan > kijun
    bullish_score += 2
if close < senkou_a and close < senkou_b and tenkan < kijun
    bearish_score += 2

// MFI Signals
if mfi < 20
    bullish_score += 1
if mfi > 80
    bearish_score += 1

// Fibonacci Support/Resistance
if support_bounce
    bullish_score += 2
if resistance_rejection
    bearish_score += 2

// Chart Pattern Signals (Enhanced)
if bullish_engulfing or hammer or double_bottom or inv_head_shoulders
    bullish_score += 2

if bearish_engulfing or shooting_star or double_top or head_shoulders
    bearish_score += 2

if triangle_pattern and close > close[5]
    bullish_score += 1
if triangle_pattern and close < close[5]
    bearish_score += 1

// Advanced Pattern Signals
if flag_pattern_bull or falling_wedge or cup_pattern or morning_star or three_white_soldiers
    bullish_score += 2

if flag_pattern_bear or rising_wedge or evening_star or three_black_crows
    bearish_score += 2

// Elliott Wave Signals
if elliott_bullish
    bullish_score += 3
if elliott_bearish
    bearish_score += 3

// Rectangle Breakout Signals
if rectangle_breakout_bull
    bullish_score += 2
if rectangle_breakout_bear
    bearish_score += 2

// Gap Signals (with volume confirmation)
if gap_up and volume > volume_ma * 1.5
    bullish_score += 1
if gap_down and volume > volume_ma * 1.5
    bearish_score += 1

// LuxAlgo-Style Market Structure Signals
if bos_bullish or choch_bullish
    bullish_score += 3  // High weight for structure breaks
if bos_bearish or choch_bearish
    bearish_score += 3

// Order Block Signals
if bullish_order_block and discount_zone
    bullish_score += 2  // Buying at discount with institutional interest
if bearish_order_block and premium_zone
    bearish_score += 2  // Selling at premium with institutional interest

// Smart Money Flow Signals
if smart_money_bullish
    bullish_score += 2
if smart_money_bearish
    bearish_score += 2

// Confluence Zone Signals (Highest Priority)
if confluence_bullish
    bullish_score += 4  // Maximum weight for multiple factor alignment
if confluence_bearish
    bearish_score += 4

// Liquidity Grab Signals
if liquidity_grab_low and bullish_reversal
    bullish_score += 2  // Liquidity grabbed, ready for reversal
if liquidity_grab_high and bearish_reversal
    bearish_score += 2

// Premium/Discount Zone Adjustments
if premium_zone and buy_signal
    bullish_score -= 1  // Reduce bullish bias in premium (expensive) zone
if discount_zone and sell_signal
    bearish_score -= 1  // Reduce bearish bias in discount (cheap) zone

// ============================================================================
// FINAL SIGNALS - Ultra Strong Conditions Only
// ============================================================================

// Require overwhelming bullish/bearish consensus
score_difference = math.abs(bullish_score - bearish_score)
required_difference = min_score * signal_strength_multiplier

// HIGH CONFIDENCE SIGNALS - Balanced for Practical Trading
// Require strong confirmations but not impossible standards

// Strong buy: Multiple confirmations + LuxAlgo-Style Smart Money Filter
strong_buy_conditions = bullish_score >= min_score and 
   score_difference >= required_difference and 
   bullish_score > bearish_score and
   time_filter_ok and volume_ok and
   (not smart_money_filter or smart_money_bullish or confluence_bullish) and
   (golden_cross or (current_wave == 1 or current_wave == 3) or bullish_reversal or 
   (rsi < rsi_oversold and macd_line > signal_line) or bos_bullish)

// Strong sell: Multiple confirmations + LuxAlgo-Style Smart Money Filter  
strong_sell_conditions = bearish_score >= min_score and 
   score_difference >= required_difference and 
   bearish_score > bullish_score and
   time_filter_ok and volume_ok and
   (not smart_money_filter or smart_money_bearish or confluence_bearish) and
   (death_cross or current_wave == 5 or bearish_reversal or 
   (rsi > rsi_overbought and macd_line < signal_line) or bos_bearish)

// Final signals - High confidence but achievable
buy_signal = strong_buy_conditions

// Fallback signals for when main system is too strict - Day Trading Optimized
simple_buy = bullish_score >= (min_score - 2) and bullish_score > bearish_score and 
   time_filter_ok and volume_ok and
   (golden_cross or (rsi < 35 and macd_line > signal_line) or (current_wave == 1 or current_wave == 3))

simple_sell = bearish_score >= (min_score - 2) and bearish_score > bullish_score and 
   time_filter_ok and volume_ok and
   (death_cross or (rsi > 65 and macd_line < signal_line) or current_wave == 5)

sell_signal = strong_sell_conditions

// Use fallback if main signals are not triggering
if not buy_signal and not sell_signal
    buy_signal := simple_buy
    sell_signal := simple_sell

// ============================================================================
// BACKTESTING AND TRADE TRACKING
// ============================================================================

// Trade tracking variables
var int total_trades = 0
var int winning_trades = 0
var int losing_trades = 0
var float total_profit = 0.0
var float entry_price = 0.0
var int entry_bar = 0
var bool in_long_position = false
var bool in_short_position = false

// Execute trades based on signals
if buy_signal and not in_long_position and not in_short_position
    strategy.entry("Long", strategy.long, qty=position_size)
    entry_price := close
    entry_bar := bar_index
    in_long_position := true
    total_trades += 1

if sell_signal and not in_short_position and not in_long_position
    strategy.entry("Short", strategy.short, qty=position_size)
    entry_price := close
    entry_bar := bar_index
    in_short_position := true
    total_trades += 1

// Exit conditions
long_stop_loss = use_stop_loss ? entry_price * (1 - stop_loss_percent / 100) : na
long_take_profit = use_take_profit ? entry_price * (1 + take_profit_percent / 100) : na
short_stop_loss = use_stop_loss ? entry_price * (1 + stop_loss_percent / 100) : na
short_take_profit = use_take_profit ? entry_price * (1 - take_profit_percent / 100) : na

// Close long positions
if in_long_position
    exit_long = sell_signal or 
       (use_stop_loss and close <= long_stop_loss) or 
       (use_take_profit and close >= long_take_profit)
    
    if exit_long
        strategy.close("Long")
        trade_profit = (close - entry_price) / entry_price * 100
        total_profit += trade_profit
        
        if trade_profit > 0
            winning_trades += 1
            // Show winning trade label - Perfect Tracking
            label.new(bar_index, na, "💰 WIN\n+" + str.tostring(trade_profit, "#.#") + "%", 
             color=color.green, textcolor=color.white, style=label.style_label_down, 
             size=size.small, yloc=yloc.abovebar)
        else
            losing_trades += 1
            // Show losing trade label - Perfect Tracking
            label.new(bar_index, na, "❌ LOSS\n" + str.tostring(trade_profit, "#.#") + "%", 
             color=color.red, textcolor=color.white, style=label.style_label_up, 
             size=size.small, yloc=yloc.belowbar)
            
        in_long_position := false

// Close short positions  
if in_short_position
    exit_short = buy_signal or 
       (use_stop_loss and close >= short_stop_loss) or 
       (use_take_profit and close <= short_take_profit)
    
    if exit_short
        strategy.close("Short")
        trade_profit = (entry_price - close) / entry_price * 100
        total_profit += trade_profit
        
        if trade_profit > 0
            winning_trades += 1
            // Show winning short trade label - Resize Resistant
            label.new(bar_index, low, "💰 WIN\n+" + str.tostring(trade_profit, "#.#") + "%", 
             color=color.green, textcolor=color.white, style=label.style_label_up, 
             size=size.small, yloc=yloc.belowbar)
        else
            losing_trades += 1
            // Show losing short trade label - Resize Resistant
            label.new(bar_index, high, "❌ LOSS\n" + str.tostring(trade_profit, "#.#") + "%", 
             color=color.red, textcolor=color.white, style=label.style_label_down, 
             size=size.small, yloc=yloc.abovebar)
            
        in_short_position := false

// Calculate performance metrics
win_rate = total_trades > 0 ? (winning_trades / total_trades) * 100 : 0
avg_profit_per_trade = total_trades > 0 ? total_profit / total_trades : 0
profit_factor = losing_trades > 0 and winning_trades > 0 ? winning_trades / losing_trades : 0

// ============================================================================
// PLOTTING AND VISUALIZATION
// ============================================================================

// Essential Plots Only - Reduced to minimize plot count
plot(ema_fast, color=color.blue, title="EMA Fast", linewidth=1)
plot(sma_long, color=color.purple, title="SMA Long", linewidth=2)

// Plot Bollinger Bands
p1 = plot(bb_upper, color=color.gray, title="BB Upper")
p2 = plot(bb_lower, color=color.gray, title="BB Lower")
fill(p1, p2, color=color.new(color.gray, 90), title="BB Fill")

// ============================================================================
// ELLIOTT WAVE VISUALIZATION & PRICE LEVELS
// ============================================================================

// Plot Elliott Wave Current Position
wave_color = current_wave == 1 ? color.green : current_wave == 2 ? color.orange : 
             current_wave == 3 ? color.blue : current_wave == 4 ? color.yellow : 
             current_wave == 5 ? color.red : color.gray

// ============================================================================
// CONSOLIDATED ELLIOTT WAVE DISPLAY - Single Clean Label
// ============================================================================

// ============================================================================
// ENHANCED ELLIOTT WAVE VISUALIZATION
// ============================================================================

// Show Elliott Wave structure with proper validation - Resize Resistant
if current_wave > 0
    wave_status = current_wave == 1 ? "🌊 WAVE 1 - Early Entry" : 
                 current_wave == 2 ? "🌊 WAVE 2 - Correction" : 
                 current_wave == 3 ? "🌊 WAVE 3 - Strongest!" : 
                 current_wave == 4 ? "🌊 WAVE 4 - Correction" : 
                 current_wave == 5 ? "🌊 WAVE 5 - Final Push" : "🌊 NO WAVE"
    
    // Add wave validation info
    wave_validation = wave_state >= 3 ? " ✓VALID" : " ?FORMING"
    
    // Show label when wave changes or for important confirmations
    show_wave_label = (current_wave != current_wave[1]) or 
       (wave_state >= 3 and wave_state != wave_state[1]) or
       (bar_index % 20 == 0 and current_wave > 0)
    
    if show_wave_label
        label.new(bar_index, na, wave_status + wave_validation, 
         color=wave_color, textcolor=color.white, style=label.style_label_down, 
         size=size.normal, yloc=yloc.abovebar)

// Draw wave structure lines for confirmed waves
if not na(wave_1_start_price) and not na(wave_1_end_price) and wave_state >= 2
    line.new(wave_start_bar, wave_1_start_price, wave_start_bar + 20, wave_1_end_price, 
     color=color.green, style=line.style_solid, width=1)
    
// Show wave pivot points for major waves - Perfect Tracking
if not na(recent_high) and wave_state >= 2
    label.new(bar_index, na, "H", color=color.blue, textcolor=color.white, 
     style=label.style_label_down, size=size.tiny, yloc=yloc.abovebar)
     
if not na(recent_low) and wave_state >= 1
    label.new(bar_index, na, "L", color=color.red, textcolor=color.white, 
     style=label.style_label_up, size=size.tiny, yloc=yloc.belowbar)

// Plot optimal entry price levels for buy waves (1, 3, 5)
show_wave_1_entry = current_wave == 1 and wave_1_entry_price > 0
show_wave_3_entry = current_wave == 3 and wave_3_entry_price > 0  
show_wave_5_entry = current_wave == 5 and wave_5_entry_price > 0

// ============================================================================
// SIMPLIFIED PRICE LEVELS - Only Key Levels, No Labels
// ============================================================================

// Only show price lines for current wave without cluttering labels
// The price information is already included in the main signal labels above

// Entry price lines - Scale independent with extend
if show_wave_1_entry
    line.new(bar_index, wave_1_entry_price, bar_index + 1, wave_1_entry_price, 
     color=color.green, style=line.style_solid, width=2, extend=extend.right)

if show_wave_3_entry
    line.new(bar_index, wave_3_entry_price, bar_index + 1, wave_3_entry_price, 
     color=color.blue, style=line.style_solid, width=2, extend=extend.right)

if show_wave_5_entry
    line.new(bar_index, wave_5_entry_price, bar_index + 1, wave_5_entry_price, 
     color=color.red, style=line.style_solid, width=2, extend=extend.right)

// ============================================================================
// REVERSAL ZONE VISUALIZATION
// ============================================================================

// Plot Support and Resistance Zones
plot(major_support_1, color=support_zone ? color.green : color.new(color.green, 70), 
     style=plot.style_line, linewidth=1, title="Major Support")
plot(major_resistance_1, color=resistance_zone ? color.red : color.new(color.red, 70), 
     style=plot.style_line, linewidth=1, title="Major Resistance")

// ============================================================================
// LUXALGO-STYLE VISUALIZATION
// ============================================================================

// Premium/Discount Zone Background (LuxAlgo Style)
bgcolor(show_premium_discount and premium_zone ? color.new(color.red, 95) : na, title="Premium Zone")
bgcolor(show_premium_discount and discount_zone ? color.new(color.green, 95) : na, title="Discount Zone")

// Market Structure Labels (LuxAlgo Style) - Perfect Tracking
if show_market_structure and bos_bullish
    label.new(bar_index, na, "BOS↑", color=color.green, textcolor=color.white, 
     style=label.style_label_up, size=size.small, yloc=yloc.belowbar)

if show_market_structure and bos_bearish
    label.new(bar_index, na, "BOS↓", color=color.red, textcolor=color.white, 
     style=label.style_label_down, size=size.small, yloc=yloc.abovebar)

if show_market_structure and choch_bullish
    label.new(bar_index, na, "CHoCH↑", color=color.blue, textcolor=color.white, 
     style=label.style_label_up, size=size.small, yloc=yloc.belowbar)

if show_market_structure and choch_bearish
    label.new(bar_index, na, "CHoCH↓", color=color.purple, textcolor=color.white, 
     style=label.style_label_down, size=size.small, yloc=yloc.abovebar)

// Order Block Visualization (LuxAlgo Style)
if show_order_blocks and bullish_order_block
    label.new(bar_index, na, "OB+", color=color.lime, textcolor=color.black, 
     style=label.style_label_up, size=size.tiny, yloc=yloc.belowbar)

if show_order_blocks and bearish_order_block
    label.new(bar_index, na, "OB-", color=color.orange, textcolor=color.white, 
     style=label.style_label_down, size=size.tiny, yloc=yloc.abovebar)

// Liquidity Grab Alerts (LuxAlgo Style)
if show_liquidity_zones and liquidity_grab_high
    label.new(bar_index, na, "LIQ↑", color=color.yellow, textcolor=color.red, 
     style=label.style_label_down, size=size.small, yloc=yloc.abovebar)

if show_liquidity_zones and liquidity_grab_low
    label.new(bar_index, na, "LIQ↓", color=color.yellow, textcolor=color.green, 
     style=label.style_label_up, size=size.small, yloc=yloc.belowbar)

// Confluence Zone Alerts (LuxAlgo Style - Highest Priority)
if confluence_bullish
    label.new(bar_index, na, "⭐ CONFLUENCE", color=color.aqua, textcolor=color.white, 
     style=label.style_label_up, size=size.normal, yloc=yloc.belowbar)

if confluence_bearish
    label.new(bar_index, na, "⭐ CONFLUENCE", color=color.maroon, textcolor=color.white, 
     style=label.style_label_down, size=size.normal, yloc=yloc.abovebar)

// ============================================================================
// CONSOLIDATED REVERSAL SIGNALS - Clean Single Labels
// ============================================================================

// Only show the MOST IMPORTANT reversal signal to avoid clutter
critical_bullish_signal = wave_5_reversal_imminent ? "🚨 WAVE 5 EXHAUSTION!" :
   (bullish_reversal and reversal_strength_bull >= 3) ? "🔄 STRONG REVERSAL" :
   wave_2_bounce_setup ? "🔄 WAVE 2 BOUNCE" :
   wave_4_bounce_setup ? "🔄 WAVE 4 BOUNCE" :
   bullish_divergence ? "⚠️ BULLISH DIV" : ""

critical_bearish_signal = wave_5_reversal_imminent ? "🚨 WAVE 5 EXHAUSTION!" :
   (bearish_reversal and reversal_strength_bear >= 3) ? "🔄 STRONG REVERSAL" :
   bearish_divergence ? "⚠️ BEARISH DIV" : ""

// Show only ONE critical signal per direction to avoid overlap - Perfect Tracking
if critical_bearish_signal != "" and critical_bearish_signal != "⚠️ BULLISH DIV"
    label.new(bar_index, na, critical_bearish_signal, 
     color=color.red, textcolor=color.white, style=label.style_label_down, 
     size=size.normal, yloc=yloc.abovebar)

if critical_bullish_signal != "" and critical_bullish_signal != "⚠️ BEARISH DIV" and critical_bullish_signal != "🚨 WAVE 5 EXHAUSTION!"
    label.new(bar_index, na, critical_bullish_signal, 
     color=color.green, textcolor=color.white, style=label.style_label_up, 
     size=size.normal, yloc=yloc.belowbar)

// ============================================================================
// ULTRA-STRONG SIGNALS ONLY - Just 2 Plots
// ============================================================================

// Plot high confidence signals with practical thresholds
plotshape(buy_signal, title="🚀 HIGH CONFIDENCE BUY", location=location.belowbar, color=color.green, 
          style=shape.labelup, text="🚀 BUY", textcolor=color.white, size=size.large)

plotshape(sell_signal, title="🔻 HIGH CONFIDENCE SELL", location=location.abovebar, color=color.red, 
          style=shape.labeldown, text="🔻 SELL", textcolor=color.white, size=size.large)

// ============================================================================
// CLEAN CHART - Signal Details Moved to Table
// ============================================================================

// No detailed labels on chart - all information is in the table
// This keeps the chart clean and readable

// Background coloring for strong signals
bgcolor(buy_signal and bullish_score >= min_score + 3 ? color.new(color.green, 85) : na, title="Strong Buy Background")
bgcolor(sell_signal and bearish_score >= min_score + 3 ? color.new(color.red, 85) : na, title="Strong Sell Background")

// ============================================================================
// TRADE VISUALIZATION
// ============================================================================

// Plot entry and exit points
plotshape(buy_signal and not in_long_position[1], title="Long Entry", location=location.belowbar, 
          color=color.green, style=shape.triangleup, text="LONG", textcolor=color.white, size=size.small)

plotshape(sell_signal and not in_short_position[1], title="Short Entry", location=location.abovebar, 
          color=color.red, style=shape.triangledown, text="SHORT", textcolor=color.white, size=size.small)

// Plot stop loss and take profit levels
plot(in_long_position and use_stop_loss ? long_stop_loss : na, color=color.red, style=plot.style_line, linewidth=1, title="Long Stop Loss")
plot(in_long_position and use_take_profit ? long_take_profit : na, color=color.green, style=plot.style_line, linewidth=1, title="Long Take Profit")
plot(in_short_position and use_stop_loss ? short_stop_loss : na, color=color.red, style=plot.style_line, linewidth=1, title="Short Stop Loss")
plot(in_short_position and use_take_profit ? short_take_profit : na, color=color.green, style=plot.style_line, linewidth=1, title="Short Take Profit")

// ============================================================================
// ALERTS
// ============================================================================

// Strategy Trade Alerts
alertcondition(buy_signal and not in_long_position, title="📈 LONG ENTRY", message="📈 LONG ENTRY SIGNAL! High confidence buy with Elliott Wave and multi-indicator confirmation!")
alertcondition(sell_signal and not in_short_position, title="📉 SHORT ENTRY", message="📉 SHORT ENTRY SIGNAL! High confidence sell with Elliott Wave and multi-indicator confirmation!")

// Trade Management Alerts
alertcondition(strategy.position_size > 0 and close <= long_stop_loss, title="🛑 LONG STOP LOSS", message="🛑 LONG STOP LOSS HIT! Position closed for risk management.")
alertcondition(strategy.position_size > 0 and close >= long_take_profit, title="💰 LONG TAKE PROFIT", message="💰 LONG TAKE PROFIT HIT! Profitable trade closed.")
alertcondition(strategy.position_size < 0 and close >= short_stop_loss, title="🛑 SHORT STOP LOSS", message="🛑 SHORT STOP LOSS HIT! Position closed for risk management.")
alertcondition(strategy.position_size < 0 and close <= short_take_profit, title="💰 SHORT TAKE PROFIT", message="💰 SHORT TAKE PROFIT HIT! Profitable trade closed.")

alertcondition(bullish_engulfing, title="Bullish Engulfing Alert", message="Bullish Engulfing pattern detected")
alertcondition(bearish_engulfing, title="Bearish Engulfing Alert", message="Bearish Engulfing pattern detected")

// Additional pattern alerts
alertcondition(hammer, title="Hammer Alert", message="Hammer candlestick pattern detected")
alertcondition(shooting_star, title="Shooting Star Alert", message="Shooting Star candlestick pattern detected")
alertcondition(double_bottom, title="Double Bottom Alert", message="Double Bottom pattern detected")
alertcondition(double_top, title="Double Top Alert", message="Double Top pattern detected")
alertcondition(head_shoulders, title="Head & Shoulders Alert", message="Head & Shoulders pattern detected")

// Golden Cross and Death Cross alerts
alertcondition(golden_cross, title="Golden Cross Alert", message="Golden Cross detected - Strong bullish signal!")
alertcondition(death_cross, title="Death Cross Alert", message="Death Cross detected - Strong bearish signal!")

// REVERSAL DETECTION ALERTS - Critical for Timing
alertcondition(bullish_reversal and reversal_strength_bull >= 3, title="🔄 STRONG BULLISH REVERSAL", 
 message="🔄 STRONG BULLISH REVERSAL detected! Multiple confirmations align for upward reversal - High probability bounce expected!")

alertcondition(bearish_reversal and reversal_strength_bear >= 3, title="🔄 STRONG BEARISH REVERSAL", 
 message="🔄 STRONG BEARISH REVERSAL detected! Multiple confirmations align for downward reversal - High probability drop expected!")

// Divergence Alerts - Early Warning System  
alertcondition(bullish_divergence, title="⚠️ BULLISH DIVERGENCE", 
 message="⚠️ BULLISH DIVERGENCE detected! Price making lower lows but indicators showing strength - Reversal likely!")

alertcondition(bearish_divergence, title="⚠️ BEARISH DIVERGENCE", 
 message="⚠️ BEARISH DIVERGENCE detected! Price making higher highs but indicators weakening - Reversal likely!")

// Elliott Wave Reversal Alerts
alertcondition(wave_5_reversal_imminent, title="🚨 WAVE 5 EXHAUSTION", 
 message="🚨 WAVE 5 EXHAUSTION! Cycle ending - Major reversal imminent! Exit all longs!")

alertcondition(wave_2_bounce_setup, title="🔄 WAVE 2 BOUNCE READY", 
 message="🔄 WAVE 2 correction complete - Ready for bounce! Entry opportunity!")

alertcondition(wave_4_bounce_setup, title="🔄 WAVE 4 BOUNCE READY", 
 message="🔄 WAVE 4 correction complete - Ready for Wave 5! Final entry opportunity!")

// Advanced pattern alerts
alertcondition(inv_head_shoulders, title="Inverse H&S Alert", message="Inverse Head & Shoulders pattern detected")
alertcondition(flag_pattern_bull, title="Bull Flag Alert", message="Bullish flag pattern detected")
alertcondition(flag_pattern_bear, title="Bear Flag Alert", message="Bearish flag pattern detected")
alertcondition(rising_wedge, title="Rising Wedge Alert", message="Rising wedge pattern detected - potential bearish reversal")
alertcondition(falling_wedge, title="Falling Wedge Alert", message="Falling wedge pattern detected - potential bullish reversal")
alertcondition(cup_pattern, title="Cup Pattern Alert", message="Cup pattern detected")
alertcondition(three_white_soldiers, title="Three White Soldiers Alert", message="Three White Soldiers pattern detected")
alertcondition(three_black_crows, title="Three Black Crows Alert", message="Three Black Crows pattern detected")
alertcondition(morning_star, title="Morning Star Alert", message="Morning Star pattern detected")
alertcondition(evening_star, title="Evening Star Alert", message="Evening Star pattern detected")
alertcondition(elliott_bullish, title="Elliott Wave Bull Alert", message="Bullish Elliott Wave pattern detected")
alertcondition(elliott_bearish, title="Elliott Wave Bear Alert", message="Bearish Elliott Wave pattern detected")
alertcondition(rectangle_breakout_bull, title="Rectangle Breakout Bull Alert", message="Bullish rectangle breakout detected")
alertcondition(rectangle_breakout_bear, title="Rectangle Breakout Bear Alert", message="Bearish rectangle breakout detected")

// ============================================================================
// TABLE WITH CURRENT SCORES
// ============================================================================

// ============================================================================
// CLEAN PERFORMANCE DASHBOARD
// ============================================================================

// Create clean, useful tables
var table performance_dashboard = table.new(position.top_left, 2, 6, bgcolor=color.white, border_width=1)
var table trading_dashboard = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)

// Update tables for real-time display
if true
    // ============================================================================
    // PERFORMANCE DASHBOARD - Key Metrics Only
    // ============================================================================
    
    table.cell(performance_dashboard, 0, 0, "📊 PERFORMANCE", text_color=color.white, bgcolor=color.navy)
    table.cell(performance_dashboard, 1, 0, "LIVE RESULTS", text_color=color.white, bgcolor=color.navy)
    
    // Win Rate - Most Important Metric
    table.cell(performance_dashboard, 0, 1, "🏆 Win Rate", text_color=color.black)
    win_rate_color = win_rate >= 70 ? color.green : win_rate >= 50 ? color.orange : color.red
    win_rate_text = total_trades > 0 ? str.tostring(win_rate, "#") + "%" : "No Trades"
    table.cell(performance_dashboard, 1, 1, win_rate_text, text_color=color.white, bgcolor=win_rate_color)
    
    // Total Profit - Bottom Line
    table.cell(performance_dashboard, 0, 2, "💰 Total Profit", text_color=color.black)
    profit_color = total_profit >= 10 ? color.green : total_profit >= 0 ? color.orange : color.red
    profit_text = str.tostring(total_profit, "#.#") + "%"
    table.cell(performance_dashboard, 1, 2, profit_text, text_color=color.white, bgcolor=profit_color)
    
    // Trade Count
    table.cell(performance_dashboard, 0, 3, "📈 Trades", text_color=color.black)
    trades_text = str.tostring(total_trades) + " (" + str.tostring(winning_trades) + "W/" + str.tostring(losing_trades) + "L)"
    table.cell(performance_dashboard, 1, 3, trades_text, text_color=color.black)
    
    // Current Position
    table.cell(performance_dashboard, 0, 4, "📍 Position", text_color=color.black)
    position_text = in_long_position ? "LONG" : in_short_position ? "SHORT" : "NONE"
    position_color = in_long_position ? color.green : in_short_position ? color.red : color.gray
    table.cell(performance_dashboard, 1, 4, position_text, text_color=color.white, bgcolor=position_color)
    
    // Strategy Status
    table.cell(performance_dashboard, 0, 5, "⚡ Status", text_color=color.black)
    strategy_status = buy_signal ? "BUY SIGNAL" : sell_signal ? "SELL SIGNAL" : "SCANNING..."
    status_color = buy_signal ? color.green : sell_signal ? color.red : color.blue
    table.cell(performance_dashboard, 1, 5, strategy_status, text_color=color.white, bgcolor=status_color)

    // ============================================================================
    // TRADING DASHBOARD - Essential Info Only
    // ============================================================================
    
    table.cell(trading_dashboard, 0, 0, "🎯 TRADING SIGNALS", text_color=color.white, bgcolor=color.navy)
    table.cell(trading_dashboard, 1, 0, "LIVE ANALYSIS", text_color=color.white, bgcolor=color.navy)
    
    // Current Signal
    table.cell(trading_dashboard, 0, 1, "📶 Signal", text_color=color.black)
    signal_display = buy_signal ? "🚀 BUY" : sell_signal ? "🔻 SELL" : "⏸️ HOLD"
    signal_bg = buy_signal ? color.green : sell_signal ? color.red : color.gray
    table.cell(trading_dashboard, 1, 1, signal_display, text_color=color.white, bgcolor=signal_bg)
    
    // Score Information
    table.cell(trading_dashboard, 0, 2, "📊 Score", text_color=color.black)
    score_display = "Bull:" + str.tostring(bullish_score) + " Bear:" + str.tostring(bearish_score)
    score_bg = bullish_score > bearish_score ? color.green : bearish_score > bullish_score ? color.red : color.gray
    table.cell(trading_dashboard, 1, 2, score_display, text_color=color.white, bgcolor=score_bg)
    
    // Elliott Wave Status
    table.cell(trading_dashboard, 0, 3, "🌊 Elliott Wave", text_color=color.black)
    wave_info = current_wave > 0 ? "Wave " + str.tostring(current_wave) : "No Wave"
    wave_color = current_wave == 1 or current_wave == 3 or current_wave == 5 ? color.green : 
       current_wave == 2 or current_wave == 4 ? color.orange : color.gray
    table.cell(trading_dashboard, 1, 3, wave_info, text_color=color.white, bgcolor=wave_color)
    
    // Entry/Exit Price
    table.cell(trading_dashboard, 0, 4, "💰 Target Price", text_color=color.black)
    if buy_signal
        target_price = current_wave == 1 ? wave_1_entry_price : 
           current_wave == 3 ? wave_3_entry_price : 
           current_wave == 5 ? wave_5_entry_price : close
        table.cell(trading_dashboard, 1, 4, "BUY: " + str.tostring(target_price, "#.##"), text_color=color.white, bgcolor=color.green)
    else if sell_signal
        target_price = current_wave == 2 ? wave_2_exit_price :
           current_wave == 4 ? wave_4_exit_price :
           current_wave == 5 ? wave_5_exit_price : close
        table.cell(trading_dashboard, 1, 4, "SELL: " + str.tostring(target_price, "#.##"), text_color=color.white, bgcolor=color.red)
    else
        table.cell(trading_dashboard, 1, 4, "WAIT: " + str.tostring(close, "#.##"), text_color=color.black, bgcolor=color.gray)
    
    // LuxAlgo-Style Market Analysis
    table.cell(trading_dashboard, 0, 5, "🏛️ Smart Money", text_color=color.black)
    sm_status = smart_money_bullish ? "BULLISH" : 
       smart_money_bearish ? "BEARISH" : 
       confluence_bullish ? "CONFLUENCE+" : 
       confluence_bearish ? "CONFLUENCE-" : "NEUTRAL"
    sm_color = smart_money_bullish or confluence_bullish ? color.green : 
       smart_money_bearish or confluence_bearish ? color.red : color.gray
    table.cell(trading_dashboard, 1, 5, sm_status, text_color=color.white, bgcolor=sm_color)
    
    // LuxAlgo-Style Zone Analysis
    table.cell(trading_dashboard, 0, 6, "📍 Price Zone", text_color=color.black)
    zone_status = premium_zone ? "PREMIUM (Sell Zone)" : 
       discount_zone ? "DISCOUNT (Buy Zone)" : 
       "FAIR VALUE (Neutral)"
    zone_color = premium_zone ? color.red : 
       discount_zone ? color.green : color.gray
    table.cell(trading_dashboard, 1, 6, zone_status, text_color=color.white, bgcolor=zone_color)
    
    // LuxAlgo-Style Trading Guide
    table.cell(trading_dashboard, 0, 7, "💡 LuxAlgo Guide", text_color=color.black)
    luxalgo_guide = confluence_bullish ? "⭐ Perfect Buy Setup!" :
       confluence_bearish ? "⭐ Perfect Sell Setup!" :
       (bos_bullish and discount_zone) ? "BOS + Discount = Buy" :
       (bos_bearish and premium_zone) ? "BOS + Premium = Sell" :
       (bullish_order_block and discount_zone) ? "OB + Discount = Buy" :
       (bearish_order_block and premium_zone) ? "OB + Premium = Sell" :
       premium_zone ? "Premium - Wait for sells" :
       discount_zone ? "Discount - Look for buys" : "Fair value - Monitor"
    luxalgo_color = confluence_bullish or (bos_bullish and discount_zone) ? color.green :
       confluence_bearish or (bos_bearish and premium_zone) ? color.red :
       premium_zone or discount_zone ? color.blue : color.gray
    table.cell(trading_dashboard, 1, 7, luxalgo_guide, text_color=color.white, bgcolor=luxalgo_color)