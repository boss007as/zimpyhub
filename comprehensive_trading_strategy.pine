//@version=6
indicator("Comprehensive Trading Strategy - All Indicators & Patterns", shorttitle="CTS", overlay=true)

// ============================================================================
// INPUT PARAMETERS
// ============================================================================

// Moving Averages
ema_fast_length = input.int(12, title="EMA Fast Length", group="Moving Averages")
ema_slow_length = input.int(26, title="EMA Slow Length", group="Moving Averages")
sma_length = input.int(50, title="SMA Length", group="Moving Averages")
sma_long_length = input.int(200, title="SMA Long Length", group="Moving Averages")

// RSI
rsi_length = input.int(14, title="RSI Length", group="RSI")
rsi_overbought = input.int(70, title="RSI Overbought", group="RSI")
rsi_oversold = input.int(30, title="RSI Oversold", group="RSI")

// MACD
macd_fast_length = input.int(12, title="MACD Fast Length", group="MACD")
macd_slow_length = input.int(26, title="MACD Slow Length", group="MACD")
macd_signal_length = input.int(9, title="MACD Signal Length", group="MACD")

// Bollinger Bands
bb_length = input.int(20, title="BB Length", group="Bollinger Bands")
bb_mult = input.float(2.0, title="BB Multiplier", group="Bollinger Bands")

// Stochastic
stoch_k_length = input.int(14, title="Stochastic %K Length", group="Stochastic")
stoch_d_length = input.int(3, title="Stochastic %D Length", group="Stochastic")
stoch_overbought = input.int(80, title="Stochastic Overbought", group="Stochastic")
stoch_oversold = input.int(20, title="Stochastic Oversold", group="Stochastic")

// ADX
adx_length = input.int(14, title="ADX Length", group="ADX")
adx_threshold = input.int(25, title="ADX Threshold", group="ADX")

// Volume
volume_ma_length = input.int(20, title="Volume MA Length", group="Volume")

// Williams %R
williams_length = input.int(14, title="Williams %R Length", group="Williams %R")

// Commodity Channel Index (CCI)
cci_length = input.int(20, title="CCI Length", group="CCI")

// Scoring System - Higher threshold for stronger signals
min_score = input.int(15, title="Minimum Score for Signal", group="Signal Settings", minval=10, maxval=25)
signal_strength_multiplier = input.float(1.5, title="Signal Strength Multiplier", group="Signal Settings", minval=1.0, maxval=3.0)

// ============================================================================
// INDICATOR CALCULATIONS
// ============================================================================

// Moving Averages
ema_fast = ta.ema(close, ema_fast_length)
ema_slow = ta.ema(close, ema_slow_length)
sma = ta.sma(close, sma_length)
sma_long = ta.sma(close, sma_long_length)

// RSI
rsi = ta.rsi(close, rsi_length)

// MACD
[macd_line, signal_line, histogram] = ta.macd(close, macd_fast_length, macd_slow_length, macd_signal_length)

// Bollinger Bands
[bb_middle, bb_upper, bb_lower] = ta.bb(close, bb_length, bb_mult)

// Stochastic
stoch_k = ta.stoch(close, high, low, stoch_k_length)
stoch_d = ta.sma(stoch_k, stoch_d_length)

// ADX
[di_plus, di_minus, adx] = ta.dmi(adx_length, adx_length)

// Volume
volume_ma = ta.sma(volume, volume_ma_length)

// Williams %R
williams_r = ta.wpr(williams_length)

// CCI
cci = ta.cci(hlc3, cci_length)

// Golden Cross and Death Cross
golden_cross = ta.crossover(ema_fast, sma_long)
death_cross = ta.crossunder(ema_fast, sma_long)

// Fibonacci Levels (simplified)
fib_high = ta.highest(high, 50)
fib_low = ta.lowest(low, 50)
fib_range = fib_high - fib_low
fib_236 = fib_low + fib_range * 0.236
fib_382 = fib_low + fib_range * 0.382
fib_500 = fib_low + fib_range * 0.500
fib_618 = fib_low + fib_range * 0.618
fib_786 = fib_low + fib_range * 0.786

// Parabolic SAR
psar = ta.sar(0.02, 0.02, 0.2)

// Ichimoku Cloud components
tenkan = (ta.highest(high, 9) + ta.lowest(low, 9)) / 2
kijun = (ta.highest(high, 26) + ta.lowest(low, 26)) / 2
senkou_a = (tenkan + kijun) / 2
senkou_b = (ta.highest(high, 52) + ta.lowest(low, 52)) / 2

// On Balance Volume (OBV)
obv = ta.obv

// Money Flow Index (MFI)
mfi = ta.mfi(close, 14)

// Global volume calculations to avoid conditional ta.sma calls
volume_sma_20 = ta.sma(volume, 20)
close_sma_50 = ta.sma(close, 50)

// ============================================================================
// CHART PATTERN DETECTION
// ============================================================================

// Candlestick Patterns
bullish_engulfing = close[1] < open[1] and close > open and close > open[1] and open < close[1]
bearish_engulfing = close[1] > open[1] and close < open and close < open[1] and open > close[1]

doji = math.abs(close - open) <= (high - low) * 0.1
hammer = (close > open) and ((high - close) <= 2 * (close - open)) and ((open - low) >= 2 * (close - open))
shooting_star = (close < open) and ((close - low) <= 2 * (open - close)) and ((high - open) >= 2 * (open - close))

// Support and Resistance Levels
pivot_high = ta.pivothigh(high, 5, 5)
pivot_low = ta.pivotlow(low, 5, 5)

// Double Top/Bottom Detection (simplified)
double_top = not na(pivot_high) and not na(pivot_high[10]) and math.abs(pivot_high - pivot_high[10]) < (high - low) * 0.02
double_bottom = not na(pivot_low) and not na(pivot_low[10]) and math.abs(pivot_low - pivot_low[10]) < (high - low) * 0.02

// Triangle Pattern Detection (simplified)
higher_lows = low > low[5] and low[5] > low[10]
lower_highs = high < high[5] and high[5] < high[10]
triangle_pattern = higher_lows and lower_highs

// Head and Shoulders (simplified detection)
head_shoulders = not na(pivot_high[10]) and not na(pivot_high[5]) and not na(pivot_high) and 
   pivot_high[5] > pivot_high[10] and pivot_high[5] > pivot_high and
   math.abs(pivot_high[10] - pivot_high) < (high - low) * 0.05

// Inverse Head and Shoulders
inv_head_shoulders = not na(pivot_low[10]) and not na(pivot_low[5]) and not na(pivot_low) and 
   pivot_low[5] < pivot_low[10] and pivot_low[5] < pivot_low and
   math.abs(pivot_low[10] - pivot_low) < (high - low) * 0.05

// Flag and Pennant Patterns
flag_pattern_bull = close > close[10] and close[10] > close[20] and 
   (high[1] - low[1]) < (high[10] - low[10]) * 0.5
flag_pattern_bear = close < close[10] and close[10] < close[20] and 
   (high[1] - low[1]) < (high[10] - low[10]) * 0.5

// Wedge Patterns
rising_wedge = low > low[5] and low[5] > low[10] and high > high[5] and high[5] > high[10] and
   (high - low) < (high[10] - low[10])
falling_wedge = low < low[5] and low[5] < low[10] and high < high[5] and high[5] < high[10] and
   (high - low) < (high[10] - low[10])

// Cup and Handle Pattern
cup_pattern = not na(pivot_low[20]) and not na(pivot_low[10]) and not na(pivot_low) and 
   pivot_low[10] < pivot_low[20] and pivot_low[10] < pivot_low and
   math.abs(pivot_low[20] - pivot_low) < (high - low) * 0.1

// ============================================================================
// PROPER ELLIOTT WAVE ANALYSIS - Sequential Wave Structure
// ============================================================================

// Input for wave detection sensitivity
wave_lookback = input.int(50, title="Elliott Wave Lookback Period", group="Elliott Wave", minval=20, maxval=200)

// Find significant pivot points for wave analysis
pivot_high_strength = 10
pivot_low_strength = 10

// Get recent significant highs and lows
recent_high = ta.pivothigh(high, pivot_high_strength, pivot_high_strength)
recent_low = ta.pivotlow(low, pivot_low_strength, pivot_low_strength)

// Track wave progression using proper Elliott Wave rules
var int wave_state = 0
var float wave_1_start_price = na
var float wave_1_end_price = na
var float wave_2_end_price = na
var float wave_3_end_price = na
var float wave_4_end_price = na
var int wave_start_bar = 0

// Elliott Wave State Machine - Proper Sequential Detection
if not na(recent_low) and wave_state == 0
    // Potential Wave 1 start
    wave_1_start_price := recent_low
    wave_start_bar := bar_index
    wave_state := 1

if wave_state == 1 and not na(recent_high) and recent_high > wave_1_start_price * 1.05
    // Wave 1 completion - significant move up from start
    wave_1_end_price := recent_high
    wave_state := 2

if wave_state == 2 and not na(recent_low) and recent_low < wave_1_end_price and recent_low > wave_1_start_price
    // Wave 2 completion - correction that doesn't exceed Wave 1 start
    wave_2_end_price := recent_low
    wave_state := 3

if wave_state == 3 and not na(recent_high) and recent_high > wave_1_end_price * 1.1
    // Wave 3 completion - strongest move, exceeds Wave 1 high significantly
    wave_3_end_price := recent_high
    wave_state := 4

if wave_state == 4 and not na(recent_low) and recent_low < wave_3_end_price and recent_low > wave_2_end_price
    // Wave 4 completion - correction that doesn't overlap Wave 1
    wave_4_end_price := recent_low
    wave_state := 5

if wave_state == 5 and not na(recent_high) and recent_high > wave_4_end_price
    // Wave 5 in progress or completion
    if rsi > 70 and volume < volume_sma_20 * 0.8
        // Wave 5 showing exhaustion signs - cycle may be complete
        wave_state := 0  // Reset for new cycle
    
// Current wave determination based on state and price action
current_wave = wave_state == 1 and close > wave_1_start_price ? 1 :
               wave_state == 2 and close < wave_1_end_price ? 2 :
               wave_state == 3 and close > wave_2_end_price ? 3 :
               wave_state == 4 and close < wave_3_end_price ? 4 :
               wave_state == 5 and close > wave_4_end_price ? 5 : 0

// Wave activity flags for compatibility
wave_1_active = current_wave == 1
wave_2_active = current_wave == 2
wave_3_active = current_wave == 3
wave_4_active = current_wave == 4
wave_5_active = current_wave == 5

// Elliott Wave Buy/Sell Signals
elliott_buy_wave_1 = current_wave == 1 and not wave_1_active[1]  // Just entered wave 1
elliott_buy_wave_3 = current_wave == 3 and not wave_3_active[1]  // Just entered wave 3  
elliott_buy_wave_5 = current_wave == 5 and not wave_5_active[1]  // Just entered wave 5

elliott_sell_wave_2 = current_wave == 2 and not wave_2_active[1]  // Just entered wave 2 correction
elliott_sell_wave_4 = current_wave == 4 and not wave_4_active[1]  // Just entered wave 4 correction

// Optimal Entry Prices based on proper wave structure
wave_1_entry_price = not na(wave_1_start_price) ? wave_1_start_price * 1.02 : close  // 2% above wave start
wave_3_entry_price = not na(wave_2_end_price) ? wave_2_end_price * 1.01 : close  // Just above wave 2 end
wave_5_entry_price = not na(wave_4_end_price) ? wave_4_end_price * 1.005 : close  // Minimal premium above wave 4 end

// Optimal Exit Prices based on wave structure
wave_2_exit_price = not na(wave_1_end_price) ? wave_1_end_price * 0.618 : close * 0.95  // 61.8% retracement target
wave_4_exit_price = not na(wave_3_end_price) ? wave_3_end_price * 0.382 : close * 0.97  // 38.2% retracement target  
wave_5_exit_price = not na(wave_3_end_price) and not na(wave_1_end_price) ? 
   wave_3_end_price + (wave_3_end_price - wave_1_end_price) * 0.618 : close * 1.05  // Fibonacci extension target

// Legacy variables for compatibility
elliott_bullish = elliott_buy_wave_1 or elliott_buy_wave_3 or elliott_buy_wave_5
elliott_bearish = elliott_sell_wave_2 or elliott_sell_wave_4 or (current_wave == 5 and rsi > 80)

// ============================================================================
// REVERSAL DETECTION SYSTEM
// ============================================================================

// 1. DIVERGENCE DETECTION
// Price making higher highs but indicators making lower highs (bearish divergence)
price_higher_high = high > ta.highest(high, 20)[1]
rsi_lower_high = rsi < ta.highest(rsi, 20)[1] and rsi > 50
macd_lower_high = macd_line < ta.highest(macd_line, 20)[1] and macd_line > 0
bearish_divergence = price_higher_high and (rsi_lower_high or macd_lower_high)

// Price making lower lows but indicators making higher lows (bullish divergence)
price_lower_low = low < ta.lowest(low, 20)[1]
rsi_higher_low = rsi > ta.lowest(rsi, 20)[1] and rsi < 50
macd_higher_low = macd_line > ta.lowest(macd_line, 20)[1] and macd_line < 0
bullish_divergence = price_lower_low and (rsi_higher_low or macd_higher_low)

// 2. ELLIOTT WAVE REVERSAL SIGNALS
// Wave 5 exhaustion - multiple warning signs
wave_5_exhaustion = current_wave == 5 and rsi > 75 and volume < volume_sma_20 * 0.8
wave_5_reversal_imminent = wave_5_exhaustion and bearish_divergence

// Wave 2/4 correction completion - bounce signals
wave_2_bounce_setup = current_wave == 2 and rsi < 35 and close <= fib_382
wave_4_bounce_setup = current_wave == 4 and rsi < 40 and close <= fib_500

// 3. SUPPORT/RESISTANCE REVERSAL ZONES
// Major support levels
major_support_1 = ta.lowest(low, 50)
major_support_2 = ta.lowest(low, 100) 
support_zone = close <= major_support_1 * 1.02 or close <= major_support_2 * 1.02

// Major resistance levels
major_resistance_1 = ta.highest(high, 50)
major_resistance_2 = ta.highest(high, 100)
resistance_zone = close >= major_resistance_1 * 0.98 or close >= major_resistance_2 * 0.98

// 4. VOLUME REVERSAL SIGNALS
volume_spike = volume > volume_sma_20 * 2.0
volume_exhaustion = volume < volume_sma_20 * 0.5

// 5. MULTI-TIMEFRAME REVERSAL CONFIRMATION
// Overbought/Oversold across multiple indicators
extreme_overbought = rsi > 80 and stoch_k > 90 and cci > 150 and williams_r > -10
extreme_oversold = rsi < 20 and stoch_k < 10 and cci < -150 and williams_r < -90

// 6. CANDLESTICK REVERSAL PATTERNS (Enhanced)
// Doji at key levels
doji_reversal = doji and (support_zone or resistance_zone)

// Hammer at support
hammer_reversal = hammer and support_zone and rsi < 40

// Shooting star at resistance  
shooting_star_reversal = shooting_star and resistance_zone and rsi > 60

// 7. COMPREHENSIVE REVERSAL SIGNALS
// BULLISH REVERSAL (Upward turn likely)
bullish_reversal = (bullish_divergence or wave_2_bounce_setup or wave_4_bounce_setup or 
   (extreme_oversold and support_zone) or 
   (hammer_reversal and volume_spike) or
   (doji_reversal and support_zone and rsi < 35))

// BEARISH REVERSAL (Downward turn likely)
bearish_reversal = (bearish_divergence or wave_5_reversal_imminent or 
   (extreme_overbought and resistance_zone) or
   (shooting_star_reversal and volume_spike) or
   (doji_reversal and resistance_zone and rsi > 65))

// REVERSAL STRENGTH (1-5 scale)
reversal_strength_bull = (bullish_divergence ? 1 : 0) + (wave_2_bounce_setup or wave_4_bounce_setup ? 1 : 0) + 
   (extreme_oversold ? 1 : 0) + (support_zone ? 1 : 0) + (volume_spike and hammer ? 1 : 0)

reversal_strength_bear = (bearish_divergence ? 1 : 0) + (wave_5_reversal_imminent ? 2 : 0) + 
   (extreme_overbought ? 1 : 0) + (resistance_zone ? 1 : 0) + (volume_spike and shooting_star ? 1 : 0)

// REVERSAL PRICE TARGETS
bullish_reversal_target = support_zone ? close * 1.05 : close * 1.08  // 5-8% bounce expected
bearish_reversal_target = resistance_zone ? close * 0.95 : close * 0.92  // 5-8% drop expected

// Rectangle Pattern
rectangle_top = math.abs(high - high[5]) < (high - low) * 0.02 and 
   math.abs(high[5] - high[10]) < (high - low) * 0.02
rectangle_bottom = math.abs(low - low[5]) < (high - low) * 0.02 and 
   math.abs(low[5] - low[10]) < (high - low) * 0.02
rectangle_pattern = rectangle_top and rectangle_bottom

// Breakout from Rectangle
rectangle_breakout_bull = rectangle_pattern[1] == true and close > high[1]
rectangle_breakout_bear = rectangle_pattern[1] == true and close < low[1]

// Three White Soldiers / Three Black Crows
three_white_soldiers = close > open and close[1] > open[1] and close[2] > open[2] and
   close > close[1] and close[1] > close[2] and
   open < close[1] and open[1] < close[2]

three_black_crows = close < open and close[1] < open[1] and close[2] < open[2] and
   close < close[1] and close[1] < close[2] and
   open > close[1] and open[1] > close[2]

// Morning Star / Evening Star
morning_star = close[2] < open[2] and math.abs(close[1] - open[1]) < (high[1] - low[1]) * 0.3 and
   close > open and close > (close[2] + open[2]) / 2

evening_star = close[2] > open[2] and math.abs(close[1] - open[1]) < (high[1] - low[1]) * 0.3 and
   close < open and close < (close[2] + open[2]) / 2

// Gap Patterns
gap_up = low > high[1]
gap_down = high < low[1]

// Support and Resistance Bounce
support_bounce = low <= fib_382 and low >= fib_236 and close > open
resistance_rejection = high >= fib_618 and high <= fib_786 and close < open

// ============================================================================
// SIGNAL SCORING SYSTEM
// ============================================================================

// Initialize scores
bullish_score = 0
bearish_score = 0

// Moving Average Signals
if close > ema_fast and ema_fast > ema_slow
    bullish_score += 1
if close < ema_fast and ema_fast < ema_slow
    bearish_score += 1

if close > sma and sma > sma_long
    bullish_score += 1
if close < sma and sma < sma_long
    bearish_score += 1

// RSI Signals
if rsi > 50 and rsi < rsi_overbought
    bullish_score += 1
if rsi < 50 and rsi > rsi_oversold
    bearish_score += 1

if rsi < rsi_oversold
    bullish_score += 1
if rsi > rsi_overbought
    bearish_score += 1

// MACD Signals
if macd_line > signal_line and histogram > histogram[1]
    bullish_score += 1
if macd_line < signal_line and histogram < histogram[1]
    bearish_score += 1

// Bollinger Bands Signals
if close < bb_lower
    bullish_score += 1
if close > bb_upper
    bearish_score += 1

// Stochastic Signals
if stoch_k > stoch_d and stoch_k < stoch_overbought
    bullish_score += 1
if stoch_k < stoch_d and stoch_k > stoch_oversold
    bearish_score += 1

// ADX Signals
if adx > adx_threshold and di_plus > di_minus
    bullish_score += 1
if adx > adx_threshold and di_minus > di_plus
    bearish_score += 1

// Volume Signals
if volume > volume_ma * 1.2
    if close > open
        bullish_score += 1
    else
        bearish_score += 1

// Williams %R Signals
if williams_r > -80
    bullish_score += 1
if williams_r < -20
    bearish_score += 1

// CCI Signals
if cci > 0 and cci < 100
    bullish_score += 1
if cci < 0 and cci > -100
    bearish_score += 1

// Golden Cross and Death Cross Signals
if golden_cross
    bullish_score += 3
if death_cross
    bearish_score += 3

// Parabolic SAR Signals
if close > psar
    bullish_score += 1
if close < psar
    bearish_score += 1

// Ichimoku Signals
if close > senkou_a and close > senkou_b and tenkan > kijun
    bullish_score += 2
if close < senkou_a and close < senkou_b and tenkan < kijun
    bearish_score += 2

// MFI Signals
if mfi < 20
    bullish_score += 1
if mfi > 80
    bearish_score += 1

// Fibonacci Support/Resistance
if support_bounce
    bullish_score += 2
if resistance_rejection
    bearish_score += 2

// Chart Pattern Signals (Enhanced)
if bullish_engulfing or hammer or double_bottom or inv_head_shoulders
    bullish_score += 2

if bearish_engulfing or shooting_star or double_top or head_shoulders
    bearish_score += 2

if triangle_pattern and close > close[5]
    bullish_score += 1
if triangle_pattern and close < close[5]
    bearish_score += 1

// Advanced Pattern Signals
if flag_pattern_bull or falling_wedge or cup_pattern or morning_star or three_white_soldiers
    bullish_score += 2

if flag_pattern_bear or rising_wedge or evening_star or three_black_crows
    bearish_score += 2

// Elliott Wave Signals
if elliott_bullish
    bullish_score += 3
if elliott_bearish
    bearish_score += 3

// Rectangle Breakout Signals
if rectangle_breakout_bull
    bullish_score += 2
if rectangle_breakout_bear
    bearish_score += 2

// Gap Signals (with volume confirmation)
if gap_up and volume > volume_ma * 1.5
    bullish_score += 1
if gap_down and volume > volume_ma * 1.5
    bearish_score += 1

// ============================================================================
// FINAL SIGNALS - Ultra Strong Conditions Only
// ============================================================================

// Require overwhelming bullish/bearish consensus
score_difference = math.abs(bullish_score - bearish_score)
required_difference = min_score * signal_strength_multiplier

// ULTRA HIGH CONFIDENCE SIGNALS ONLY
// Require multiple major confirmations for maximum reliability

// Ultra-strong buy: Extreme conditions required
ultra_buy_conditions = bullish_score >= (min_score + 5) and 
   score_difference >= (required_difference * 1.5) and 
   bullish_score > (bearish_score * 2) and
   (golden_cross or (current_wave == 1 or current_wave == 3) or bullish_reversal) and
   (rsi < 40 or bullish_divergence) and
   volume > volume_sma_20 * 1.5

// Ultra-strong sell: Extreme conditions required  
ultra_sell_conditions = bearish_score >= (min_score + 5) and 
   score_difference >= (required_difference * 1.5) and 
   bearish_score > (bullish_score * 2) and
   (death_cross or current_wave == 5 or bearish_reversal) and
   (rsi > 60 or bearish_divergence) and
   volume > volume_sma_20 * 1.2

// Final signals - ONLY ultra high confidence
buy_signal = ultra_buy_conditions
sell_signal = ultra_sell_conditions

// ============================================================================
// PLOTTING AND VISUALIZATION
// ============================================================================

// Essential Plots Only - Reduced to minimize plot count
plot(ema_fast, color=color.blue, title="EMA Fast", linewidth=1)
plot(sma_long, color=color.purple, title="SMA Long", linewidth=2)

// Plot Bollinger Bands
p1 = plot(bb_upper, color=color.gray, title="BB Upper")
p2 = plot(bb_lower, color=color.gray, title="BB Lower")
fill(p1, p2, color=color.new(color.gray, 90), title="BB Fill")

// ============================================================================
// ELLIOTT WAVE VISUALIZATION & PRICE LEVELS
// ============================================================================

// Plot Elliott Wave Current Position
wave_color = current_wave == 1 ? color.green : current_wave == 2 ? color.orange : 
             current_wave == 3 ? color.blue : current_wave == 4 ? color.yellow : 
             current_wave == 5 ? color.red : color.gray

// ============================================================================
// CONSOLIDATED ELLIOTT WAVE DISPLAY - Single Clean Label
// ============================================================================

// ============================================================================
// ENHANCED ELLIOTT WAVE VISUALIZATION
// ============================================================================

// Show Elliott Wave structure with proper validation
if current_wave > 0
    wave_status = current_wave == 1 ? "🌊 WAVE 1 - Early Entry" : 
                 current_wave == 2 ? "🌊 WAVE 2 - Correction" : 
                 current_wave == 3 ? "🌊 WAVE 3 - Strongest!" : 
                 current_wave == 4 ? "🌊 WAVE 4 - Correction" : 
                 current_wave == 5 ? "🌊 WAVE 5 - Final Push" : "🌊 NO WAVE"
    
    // Add wave validation info
    wave_validation = wave_state >= 3 ? " ✓VALID" : " ?FORMING"
    
    // Show label when wave changes or for important confirmations
    show_wave_label = (current_wave != current_wave[1]) or 
       (wave_state >= 3 and wave_state != wave_state[1]) or
       (bar_index % 20 == 0 and current_wave > 0)
    
    if show_wave_label
        label.new(bar_index, high * 1.02, wave_status + wave_validation, 
         color=wave_color, textcolor=color.white, style=label.style_label_down, size=size.normal)

// Draw wave structure lines for confirmed waves
if not na(wave_1_start_price) and not na(wave_1_end_price) and wave_state >= 2
    line.new(wave_start_bar, wave_1_start_price, wave_start_bar + 20, wave_1_end_price, 
     color=color.green, style=line.style_solid, width=1)
    
// Show wave pivot points for major waves
if not na(recent_high) and wave_state >= 2
    label.new(bar_index, recent_high, "H", color=color.blue, textcolor=color.white, 
     style=label.style_label_down, size=size.tiny)
     
if not na(recent_low) and wave_state >= 1
    label.new(bar_index, recent_low, "L", color=color.red, textcolor=color.white, 
     style=label.style_label_up, size=size.tiny)

// Plot optimal entry price levels for buy waves (1, 3, 5)
show_wave_1_entry = current_wave == 1 and wave_1_entry_price > 0
show_wave_3_entry = current_wave == 3 and wave_3_entry_price > 0  
show_wave_5_entry = current_wave == 5 and wave_5_entry_price > 0

// ============================================================================
// SIMPLIFIED PRICE LEVELS - Only Key Levels, No Labels
// ============================================================================

// Only show price lines for current wave without cluttering labels
// The price information is already included in the main signal labels above

if show_wave_1_entry
    line.new(bar_index - 5, wave_1_entry_price, bar_index + 15, wave_1_entry_price, 
     color=color.green, style=line.style_solid, width=1, extend=extend.right)

if show_wave_3_entry
    line.new(bar_index - 5, wave_3_entry_price, bar_index + 15, wave_3_entry_price, 
     color=color.blue, style=line.style_solid, width=1, extend=extend.right)

if show_wave_5_entry
    line.new(bar_index - 5, wave_5_entry_price, bar_index + 15, wave_5_entry_price, 
     color=color.red, style=line.style_solid, width=1, extend=extend.right)

// ============================================================================
// REVERSAL ZONE VISUALIZATION
// ============================================================================

// Plot Support and Resistance Zones
plot(major_support_1, color=support_zone ? color.green : color.new(color.green, 70), 
     style=plot.style_line, linewidth=1, title="Major Support")
plot(major_resistance_1, color=resistance_zone ? color.red : color.new(color.red, 70), 
     style=plot.style_line, linewidth=1, title="Major Resistance")

// ============================================================================
// CONSOLIDATED REVERSAL SIGNALS - Clean Single Labels
// ============================================================================

// Only show the MOST IMPORTANT reversal signal to avoid clutter
critical_bullish_signal = wave_5_reversal_imminent ? "🚨 WAVE 5 EXHAUSTION!" :
                         (bullish_reversal and reversal_strength_bull >= 3) ? "🔄 STRONG REVERSAL" :
                         wave_2_bounce_setup ? "🔄 WAVE 2 BOUNCE" :
                         wave_4_bounce_setup ? "🔄 WAVE 4 BOUNCE" :
                         bullish_divergence ? "⚠️ BULLISH DIV" : ""

critical_bearish_signal = wave_5_reversal_imminent ? "🚨 WAVE 5 EXHAUSTION!" :
                         (bearish_reversal and reversal_strength_bear >= 3) ? "🔄 STRONG REVERSAL" :
                         bearish_divergence ? "⚠️ BEARISH DIV" : ""

// Show only ONE critical signal per direction to avoid overlap
if critical_bearish_signal != "" and critical_bearish_signal != "⚠️ BULLISH DIV"
    label.new(bar_index, high * 1.01, critical_bearish_signal, 
     color=color.red, textcolor=color.white, style=label.style_label_down, size=size.normal)

if critical_bullish_signal != "" and critical_bullish_signal != "⚠️ BEARISH DIV" and critical_bullish_signal != "🚨 WAVE 5 EXHAUSTION!"
    label.new(bar_index, low * 0.99, critical_bullish_signal, 
     color=color.green, textcolor=color.white, style=label.style_label_up, size=size.normal)

// ============================================================================
// ULTRA-STRONG SIGNALS ONLY - Just 2 Plots
// ============================================================================

// Plot ONLY ultra-high confidence signals (extremely rare but highly reliable)
plotshape(buy_signal, title="🚀 ULTRA HIGH CONFIDENCE BUY", location=location.belowbar, color=color.green, 
          style=shape.labelup, text="🚀 ULTRA BUY", textcolor=color.white, size=size.large)

plotshape(sell_signal, title="🔻 ULTRA HIGH CONFIDENCE SELL", location=location.abovebar, color=color.red, 
          style=shape.labeldown, text="🔻 ULTRA SELL", textcolor=color.white, size=size.large)

// ============================================================================
// CONSOLIDATED ULTRA SIGNALS - Single Comprehensive Label
// ============================================================================

if buy_signal
    // All information in ONE clean label to avoid clutter
    best_entry_price = current_wave == 1 ? wave_1_entry_price : 
                      current_wave == 3 ? wave_3_entry_price : 
                      current_wave == 5 ? wave_5_entry_price : close
    
    // Compact signal information
    signal_summary = "🚀 ULTRA BUY | Score:" + str.tostring(bullish_score) + 
                    "\n" + (current_wave > 0 ? "Wave " + str.tostring(current_wave) : "Multi-Signal") +
                    " | Entry:" + str.tostring(best_entry_price, "#.##") +
                    "\n" + (golden_cross ? "GC✓" : "") + (bullish_reversal ? " REV✓" : "") + 
                    " RSI:" + str.tostring(math.round(rsi, 1))
    
    label.new(bar_index, low, signal_summary, 
     color=color.green, textcolor=color.white, style=label.style_label_up, size=size.large, yloc=yloc.belowbar)

if sell_signal
    // All information in ONE clean label to avoid clutter
    best_exit_price = current_wave == 2 ? wave_2_exit_price :
                     current_wave == 4 ? wave_4_exit_price :
                     current_wave == 5 ? wave_5_exit_price : close
    
    // Compact signal information
    signal_summary = "🔻 ULTRA SELL | Score:" + str.tostring(bearish_score) + 
                    "\n" + (current_wave > 0 ? "Wave " + str.tostring(current_wave) : "Multi-Signal") +
                    " | Exit:" + str.tostring(best_exit_price, "#.##") +
                    "\n" + (death_cross ? "DC✓" : "") + (bearish_reversal ? " REV✓" : "") + 
                    " RSI:" + str.tostring(math.round(rsi, 1))
    
    label.new(bar_index, high, signal_summary, 
     color=color.red, textcolor=color.white, style=label.style_label_down, size=size.large, yloc=yloc.abovebar)

// Background coloring for strong signals
bgcolor(buy_signal and bullish_score >= min_score + 3 ? color.new(color.green, 85) : na, title="Strong Buy Background")
bgcolor(sell_signal and bearish_score >= min_score + 3 ? color.new(color.red, 85) : na, title="Strong Sell Background")

// ============================================================================
// ALERTS
// ============================================================================

alertcondition(buy_signal, title="Buy Alert", message="Strong BUY signal detected!")
alertcondition(sell_signal, title="Sell Alert", message="Strong SELL signal detected!")

alertcondition(bullish_engulfing, title="Bullish Engulfing Alert", message="Bullish Engulfing pattern detected")
alertcondition(bearish_engulfing, title="Bearish Engulfing Alert", message="Bearish Engulfing pattern detected")

// Additional pattern alerts
alertcondition(hammer, title="Hammer Alert", message="Hammer candlestick pattern detected")
alertcondition(shooting_star, title="Shooting Star Alert", message="Shooting Star candlestick pattern detected")
alertcondition(double_bottom, title="Double Bottom Alert", message="Double Bottom pattern detected")
alertcondition(double_top, title="Double Top Alert", message="Double Top pattern detected")
alertcondition(head_shoulders, title="Head & Shoulders Alert", message="Head & Shoulders pattern detected")

// Golden Cross and Death Cross alerts
alertcondition(golden_cross, title="Golden Cross Alert", message="Golden Cross detected - Strong bullish signal!")
alertcondition(death_cross, title="Death Cross Alert", message="Death Cross detected - Strong bearish signal!")

// REVERSAL DETECTION ALERTS - Critical for Timing
alertcondition(bullish_reversal and reversal_strength_bull >= 3, title="🔄 STRONG BULLISH REVERSAL", 
 message="🔄 STRONG BULLISH REVERSAL detected! Multiple confirmations align for upward reversal - High probability bounce expected!")

alertcondition(bearish_reversal and reversal_strength_bear >= 3, title="🔄 STRONG BEARISH REVERSAL", 
 message="🔄 STRONG BEARISH REVERSAL detected! Multiple confirmations align for downward reversal - High probability drop expected!")

// Divergence Alerts - Early Warning System  
alertcondition(bullish_divergence, title="⚠️ BULLISH DIVERGENCE", 
 message="⚠️ BULLISH DIVERGENCE detected! Price making lower lows but indicators showing strength - Reversal likely!")

alertcondition(bearish_divergence, title="⚠️ BEARISH DIVERGENCE", 
 message="⚠️ BEARISH DIVERGENCE detected! Price making higher highs but indicators weakening - Reversal likely!")

// Elliott Wave Reversal Alerts
alertcondition(wave_5_reversal_imminent, title="🚨 WAVE 5 EXHAUSTION", 
 message="🚨 WAVE 5 EXHAUSTION! Cycle ending - Major reversal imminent! Exit all longs!")

alertcondition(wave_2_bounce_setup, title="🔄 WAVE 2 BOUNCE READY", 
 message="🔄 WAVE 2 correction complete - Ready for bounce! Entry opportunity!")

alertcondition(wave_4_bounce_setup, title="🔄 WAVE 4 BOUNCE READY", 
 message="🔄 WAVE 4 correction complete - Ready for Wave 5! Final entry opportunity!")

// Advanced pattern alerts
alertcondition(inv_head_shoulders, title="Inverse H&S Alert", message="Inverse Head & Shoulders pattern detected")
alertcondition(flag_pattern_bull, title="Bull Flag Alert", message="Bullish flag pattern detected")
alertcondition(flag_pattern_bear, title="Bear Flag Alert", message="Bearish flag pattern detected")
alertcondition(rising_wedge, title="Rising Wedge Alert", message="Rising wedge pattern detected - potential bearish reversal")
alertcondition(falling_wedge, title="Falling Wedge Alert", message="Falling wedge pattern detected - potential bullish reversal")
alertcondition(cup_pattern, title="Cup Pattern Alert", message="Cup pattern detected")
alertcondition(three_white_soldiers, title="Three White Soldiers Alert", message="Three White Soldiers pattern detected")
alertcondition(three_black_crows, title="Three Black Crows Alert", message="Three Black Crows pattern detected")
alertcondition(morning_star, title="Morning Star Alert", message="Morning Star pattern detected")
alertcondition(evening_star, title="Evening Star Alert", message="Evening Star pattern detected")
alertcondition(elliott_bullish, title="Elliott Wave Bull Alert", message="Bullish Elliott Wave pattern detected")
alertcondition(elliott_bearish, title="Elliott Wave Bear Alert", message="Bearish Elliott Wave pattern detected")
alertcondition(rectangle_breakout_bull, title="Rectangle Breakout Bull Alert", message="Bullish rectangle breakout detected")
alertcondition(rectangle_breakout_bear, title="Rectangle Breakout Bear Alert", message="Bearish rectangle breakout detected")

// ============================================================================
// TABLE WITH CURRENT SCORES
// ============================================================================

if barstate.islast
    var table score_table = table.new(position.top_right, 3, 15, bgcolor=color.white, border_width=1)
    
    table.cell(score_table, 0, 0, "Indicator", text_color=color.black, bgcolor=color.gray)
    table.cell(score_table, 1, 0, "Bullish", text_color=color.black, bgcolor=color.green)
    table.cell(score_table, 2, 0, "Bearish", text_color=color.black, bgcolor=color.red)
    
    table.cell(score_table, 0, 1, "Total Score", text_color=color.black)
    table.cell(score_table, 1, 1, str.tostring(bullish_score), text_color=color.white, bgcolor=color.green)
    table.cell(score_table, 2, 1, str.tostring(bearish_score), text_color=color.white, bgcolor=color.red)
    
    table.cell(score_table, 0, 2, "RSI", text_color=color.black)
    table.cell(score_table, 1, 2, str.tostring(math.round(rsi, 2)), text_color=color.black)
    table.cell(score_table, 2, 2, rsi > rsi_overbought ? "OB" : rsi < rsi_oversold ? "OS" : "Neutral", text_color=color.black)
    
    table.cell(score_table, 0, 3, "MACD", text_color=color.black)
    table.cell(score_table, 1, 3, macd_line > signal_line ? "↑" : "↓", text_color=color.black)
    table.cell(score_table, 2, 3, str.tostring(math.round(macd_line, 4)), text_color=color.black)
    
    table.cell(score_table, 0, 4, "Stochastic", text_color=color.black)
    table.cell(score_table, 1, 4, str.tostring(math.round(stoch_k, 2)), text_color=color.black)
    table.cell(score_table, 2, 4, stoch_k > stoch_overbought ? "OB" : stoch_k < stoch_oversold ? "OS" : "Neutral", text_color=color.black)
    
    table.cell(score_table, 0, 5, "ADX", text_color=color.black)
    table.cell(score_table, 1, 5, str.tostring(math.round(adx, 2)), text_color=color.black)
    table.cell(score_table, 2, 5, adx > adx_threshold ? "Strong" : "Weak", text_color=color.black)
    
    table.cell(score_table, 0, 6, "Williams %R", text_color=color.black)
    table.cell(score_table, 1, 6, str.tostring(math.round(williams_r, 2)), text_color=color.black)
    table.cell(score_table, 2, 6, williams_r > -20 ? "OB" : williams_r < -80 ? "OS" : "Neutral", text_color=color.black)
    
    table.cell(score_table, 0, 7, "CCI", text_color=color.black)
    table.cell(score_table, 1, 7, str.tostring(math.round(cci, 2)), text_color=color.black)
    table.cell(score_table, 2, 7, cci > 100 ? "OB" : cci < -100 ? "OS" : "Neutral", text_color=color.black)
    
    table.cell(score_table, 0, 8, "MFI", text_color=color.black)
    table.cell(score_table, 1, 8, str.tostring(math.round(mfi, 2)), text_color=color.black)
    table.cell(score_table, 2, 8, mfi > 80 ? "OB" : mfi < 20 ? "OS" : "Neutral", text_color=color.black)
    
    table.cell(score_table, 0, 9, "PSAR", text_color=color.black)
    table.cell(score_table, 1, 9, close > psar ? "↑" : "↓", text_color=color.black)
    table.cell(score_table, 2, 9, str.tostring(math.round(psar, 2)), text_color=color.black)
    
    table.cell(score_table, 0, 10, "Ichimoku", text_color=color.black)
    table.cell(score_table, 1, 10, close > senkou_a and close > senkou_b ? "↑" : "↓", text_color=color.black)
    table.cell(score_table, 2, 10, tenkan > kijun ? "Bull" : "Bear", text_color=color.black)
    
    table.cell(score_table, 0, 11, "Golden Cross", text_color=color.black)
    table.cell(score_table, 1, 11, golden_cross ? "YES" : "NO", text_color=golden_cross ? color.white : color.black, bgcolor=golden_cross ? color.yellow : na)
    table.cell(score_table, 2, 11, death_cross ? "YES" : "NO", text_color=death_cross ? color.white : color.black, bgcolor=death_cross ? color.red : na)
    
    table.cell(score_table, 0, 12, "Elliott Wave", text_color=color.black)
    table.cell(score_table, 1, 12, elliott_bullish ? "BULL" : "NEUTRAL", text_color=elliott_bullish ? color.white : color.black, bgcolor=elliott_bullish ? color.green : na)
    table.cell(score_table, 2, 12, elliott_bearish ? "BEAR" : "NEUTRAL", text_color=elliott_bearish ? color.white : color.black, bgcolor=elliott_bearish ? color.red : na)
    
    table.cell(score_table, 0, 13, "Fib Support", text_color=color.black)
    table.cell(score_table, 1, 13, support_bounce ? "YES" : "NO", text_color=support_bounce ? color.white : color.black, bgcolor=support_bounce ? color.green : na)
    table.cell(score_table, 2, 13, resistance_rejection ? "YES" : "NO", text_color=resistance_rejection ? color.white : color.black, bgcolor=resistance_rejection ? color.red : na)
    
    table.cell(score_table, 0, 14, "Signal", text_color=color.black)
    signal_text = buy_signal ? "BUY" : sell_signal ? "SELL" : "HOLD"
    signal_color = buy_signal ? color.green : sell_signal ? color.red : color.gray
    table.cell(score_table, 1, 14, signal_text, text_color=color.white, bgcolor=signal_color)
    table.cell(score_table, 2, 14, buy_signal ? str.tostring(bullish_score) : sell_signal ? str.tostring(bearish_score) : "0", text_color=color.black)